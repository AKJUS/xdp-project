#+Title: V2: Setup notes for board espressobin

This doc is notes on howto setup/install Fedora 31 on an Espressobin board.

This is very similar to [[file:board_espressobin01_setup.org]] what show howto
get Ubuntu working on the same board.

The Espressobin board homepage:
 - http://espressobin.net/tech-spec/

* Why Fedora 31

The main reason for choosing Fedora 31, is that this distro include LLVM9.
This is connected with LLVM9 can produce BTF (BPF Type Format).

* Board info in U-Boot

Jesper's new board:
#+begin_example
U-Boot 2017.03-armada-17.10.2-g255b9cc9c1 (Jun 10 2019 - 17:35:12 +0800)

Model: Marvell Armada 3720 Community Board ESPRESSOBin
       CPU    @ 1200 [MHz]
       L2     @ 800 [MHz]
       TClock @ 200 [MHz]
       DDR    @ 750 [MHz]
DRAM:  1 GiB
U-Boot DT blob at : 000000003f716298
Comphy-0: USB3          5 Gbps    
Comphy-1: PEX0          2.5 Gbps  
Comphy-2: SATA0         6 Gbps    
#+end_example

** original printenv

List existing env via printenv:

#+begin_example
Marvell>> printenv
baudrate=115200
bootargs=console=ttyMV0,115200 earlycon=ar3700_uart,0xd0012000 root=/dev/mmcblk0p1 rw rootwait net.ifnames=00
bootcmd=mmc dev 0; ext4load mmc 0:1 $kernel_addr $image_name;ext4load mmc 0:1 $fdt_addr $fdt_name;setenv boor
bootdelay=2
console=console=ttyMV0,115200 earlycon=ar3700_uart,0xd0012000
eth1addr=00:51:82:11:22:01
eth2addr=00:51:82:11:22:02
eth3addr=00:51:82:11:22:03
ethact=neta@30000
ethaddr=F0:AD:4E:0A:A5:2B
ethprime=eth0
fdt_addr=0x4f00000
fdt_high=0xffffffffffffffff
fdt_name=boot/armada-3720-community-v7.dtb
fdtcontroladdr=3f716298
gatewayip=10.4.50.254
get_images=tftpboot $kernel_addr $image_name; tftpboot $fdt_addr $fdt_name; run get_ramfs
get_ramfs=if test "${ramfs_name}" != "-"; then setenv ramfs_addr 0x8000000; tftpboot $ramfs_addr $ramfs_namei
hostname=marvell
image_name=boot/Image
initrd_addr=0xa00000
initrd_size=0x2000000
ipaddr=0.0.0.0
kernel_addr=0x5000000
loadaddr=0x5000000
netdev=eth0
netmask=255.255.255.0
ramfs_addr=0x8000000
ramfs_name=-
root=root=/dev/nfs rw
rootpath=/srv/nfs/
serverip=0.0.0.0
set_bootargs=setenv bootargs $console $root ip=$ipaddr:$serverip:$gatewayip:$netmask:$hostname:$netdev:none s
stderr=serial@12000
stdin=serial@12000
stdout=serial@12000

Environment size: 1477/65532 bytes
#+end_example

* Create SDcard

Given [[http://espressobin.net/tech-spec/][Espressobin download]] doesn't have Fedora 31, we have to create a boot
image from scratch.

Follow the instructions here:
- http://wiki.espressobin.net/tiki-index.php?page=Boot+from+removable+storage+-+Buildroot

** sdcard partition

On my system, sdcard device name was also /dev/sdb. Created partition
/dev/sdb1 and =ext4= formatted it like this:

#+begin_src sh
#(on laptop)
mkfs.ext4 -O ^metadata_csum,^64bit /dev/sdb1
#+end_src

Mount on laptop

#+begin_src sh
#(on laptop)
mkdir -p /mnt/sdcard
mount /dev/sdb1 /mnt/sdcard
#+end_src

** sdcard data

Ilias have been kind and created a rootfs tar.gz file for F31 here:
- http://people.linaro.org/~ilias.apalodimas/images/fedora-iot/Fedora-31-server-aarch64.tar.xz
- one gotcha: need to strip first directory 'media' via tar '--strip-components=1'

Alternatively download other distros from:
- http://espressobin.net/tech-spec/

Simply extract this rootfs into /mnt/sdcard/:

#+begin_src sh
#(on laptop)
tar xvf Fedora-31-server-aarch64.tar.xz --strip-components=1 -C /mnt/sdcard
#+end_src

Contents in /mnt/sdcard/boot/ :
#+begin_example
[laptop sdcard]# ll boot/
total 79416
-rw-r--r--. 1 root root    10590 Nov 13 12:58 armada-3720-espressobin.dtb
-rwxr-xr-x. 1 root root  9027813 Nov 13 12:58 Image
-rw-------. 1 root root 72276159 Nov 13 12:57 initramfs-5.3.7-301.fc31.aarch64.img
#+end_example

Remember to unmount:
#+begin_src sh
umount /mnt/sdcard
#+end_src

* Setup U-Boot on Espressobin

Again follow
- http://wiki.espressobin.net/tiki-index.php?page=Boot+from+removable+storage+-+Buildroot

** Initial failed boot
Without any setup boards fails to boot with following output:

#+begin_example
U-Boot 2017.03-armada-17.10.2-g255b9cc9c1 (Jun 10 2019 - 17:35:12 +0800)

Model: Marvell Armada 3720 Community Board ESPRESSOBin
       CPU    @ 1200 [MHz]
       L2     @ 800 [MHz]
       TClock @ 200 [MHz]
       DDR    @ 750 [MHz]
DRAM:  1 GiB
U-Boot DT blob at : 000000003f716298
Comphy-0: USB3          5 Gbps    
Comphy-1: PEX0          2.5 Gbps  
Comphy-2: SATA0         6 Gbps    
SATA link 0 timeout.
AHCI 0001.0300 32 slots 1 ports 6 Gbps 0x1 impl SATA mode
flags: ncq led only pmp fbss pio slum part sxs 
PCIE-0: Link down
MMC:   sdhci@d0000: 0, sdhci@d8000: 1
SF: Detected gd25lq32d with page size 256 Bytes, erase size 64 KiB, total 4 MiB
Net:   eth0: neta@30000 [PRIME]
Hit any key to stop autoboot:  0 
switch to partitions #0, OK
mmc0 is current device
9027813 bytes read in 400 ms (21.5 MiB/s)
 ** File not found boot/armada-3720-community-v7.dtb **
Bad Linux ARM64 Image magic!
Marvell>>
+end_example

** Setting U-Boot parameters

Listing contents of mmc:

#+begin_example
Marvell>> ext4ls mmc 0:1 boot
<DIR>       4096 .
<DIR>       4096 ..
           10590 armada-3720-espressobin.dtb
         9027813 Image
        72276159 initramfs-5.3.7-301.fc31.aarch64.img
Marvell>>
#+end_example

First, set the proper boot image name and device tree path and name:
#+begin_example
Marvell>> setenv image_name boot/Image
Marvell>> setenv fdt_name boot/armada-3720-espressobin.dtb
#+end_example

Next, define the bootmmc variable which we will use to boot from the microSD
card:
#+begin_example
setenv bootmmc 'mmc dev 0; ext4load mmc 0:1 $kernel_addr $image_name;ext4load mmc 0:1 $fdt_addr $fdt_name;setenv bootargs $console root=/dev/mmcblk0p1 rw rootwait; booti $kernel_addr - $fdt_addr'
saveenv
#+end_example

Booting fails:
#+begin_example
Marvell>> run bootmmc
switch to partitions #0, OK
mmc0 is current device
9027813 bytes read in 400 ms (21.5 MiB/s)
10590 bytes read in 6 ms (1.7 MiB/s)
Bad Linux ARM64 Image magic!
#+end_example

** Update kernel on SDcard

The kernel on SDcard seems be broken, try to update it.
Follow compile instruction in [[file:arm02_cross_compile_setup.org]].

Mount sdcard on laptop again.

In the kernel source, after compiling, the binary 'Image' file is located in
=arch/arm64/boot/Image=

#+begin_example
cp Image /mnt/sdcard/boot/
umount /mnt/sdcard
#+end_example

Booting kernel worked.

But new distro challenges:
#+begin_example
You are in emergency mode. After logging in, type "journalctl -xb" to view
system logs, "systemctl reboot" to reboot, "systemctl default" or "exit"
to boot into
Cannot open access to console, the root account is locked.
See sulogin(8) man page for more details.

Press Enter to continue.
#+end_example

** Populating /dev

The rootfs was extracted as root, but it seems that come files in =/dev=
have not been created correctly.

Getting help from:
- http://www.linuxfromscratch.org/lfs/view/6.1/chapter06/devices.html

Mount sdcard on laptop again.

Creating Initial Device Nodes:

When the kernel boots the system, it requires the presence of a few device
nodes, in particular the console and null devices. Create these by running
the following commands (as root):

#+begin_src sh
mknod -m 600 /mnt/sdcard/dev/console c 5 1
mknod -m 666 /mnt/sdcard/dev/null c 1 3
#+end_src

Also fix permissions on /tmp:
#+begin_src sh
chmod 1777 /mnt/sdcard/tmp
#+end_src

Issue: System still doesn't boot.
