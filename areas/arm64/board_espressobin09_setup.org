#+Title: V2: Setup notes for board espressobin

This doc is notes on howto setup/install Fedora 31 on an Espressobin board.

This is very similar to [[file:board_espressobin01_setup.org]] what show howto
get Ubuntu working on the same board.

The Espressobin board homepage:
 - http://espressobin.net/tech-spec/

* Why Fedora 31

The main reason for choosing Fedora 31, is that this distro include LLVM9.
This is connected with LLVM9 can produce BTF (BPF Type Format).

* Board info in U-Boot

Jesper's new board:
#+begin_example
U-Boot 2017.03-armada-17.10.2-g255b9cc9c1 (Jun 10 2019 - 17:35:12 +0800)

Model: Marvell Armada 3720 Community Board ESPRESSOBin
       CPU    @ 1200 [MHz]
       L2     @ 800 [MHz]
       TClock @ 200 [MHz]
       DDR    @ 750 [MHz]
DRAM:  1 GiB
U-Boot DT blob at : 000000003f716298
Comphy-0: USB3          5 Gbps    
Comphy-1: PEX0          2.5 Gbps  
Comphy-2: SATA0         6 Gbps    
#+end_example

** original printenv

List existing env via printenv:

#+begin_example
Marvell>> printenv
baudrate=115200
bootargs=console=ttyMV0,115200 earlycon=ar3700_uart,0xd0012000 root=/dev/mmcblk0p1 rw rootwait net.ifnames=00
bootcmd=mmc dev 0; ext4load mmc 0:1 $kernel_addr $image_name;ext4load mmc 0:1 $fdt_addr $fdt_name;setenv boor
bootdelay=2
console=console=ttyMV0,115200 earlycon=ar3700_uart,0xd0012000
eth1addr=00:51:82:11:22:01
eth2addr=00:51:82:11:22:02
eth3addr=00:51:82:11:22:03
ethact=neta@30000
ethaddr=F0:AD:4E:0A:A5:2B
ethprime=eth0
fdt_addr=0x4f00000
fdt_high=0xffffffffffffffff
fdt_name=boot/armada-3720-community-v7.dtb
fdtcontroladdr=3f716298
gatewayip=10.4.50.254
get_images=tftpboot $kernel_addr $image_name; tftpboot $fdt_addr $fdt_name; run get_ramfs
get_ramfs=if test "${ramfs_name}" != "-"; then setenv ramfs_addr 0x8000000; tftpboot $ramfs_addr $ramfs_namei
hostname=marvell
image_name=boot/Image
initrd_addr=0xa00000
initrd_size=0x2000000
ipaddr=0.0.0.0
kernel_addr=0x5000000
loadaddr=0x5000000
netdev=eth0
netmask=255.255.255.0
ramfs_addr=0x8000000
ramfs_name=-
root=root=/dev/nfs rw
rootpath=/srv/nfs/
serverip=0.0.0.0
set_bootargs=setenv bootargs $console $root ip=$ipaddr:$serverip:$gatewayip:$netmask:$hostname:$netdev:none s
stderr=serial@12000
stdin=serial@12000
stdout=serial@12000

Environment size: 1477/65532 bytes
#+end_example

* Creating Fedora 31 rootfs.tar

This section describe the manual process of creating a rootfs for ARM64,
based off the Fedora 31 aarch64 ISO image.

** Official fedora approach

We are not using this official fedora approach.
The Fedora project do have ARM install wiki here:
- https://fedoraproject.org/wiki/Architectures/ARM/Installation

There is an =arm-image-installer= software package, but it didn't contain
EspressoBin as a supported target, and it looks like its more target for
ARM-32 bit boards (although I think I spotted a 64-bit board).

** Download F31 image for aarch64

Download the *server edition* of "Fedora 31: Raw image for aarch64"
- Here: https://getfedora.org/en/server/download/
- [[https://download.fedoraproject.org/pub/fedora/linux/releases/31/Server/aarch64/images/Fedora-Server-31-1.9.aarch64.raw.xz][Deep-link: Fedora-Server-31-1.9.aarch64.raw.xz]]

All the Fedora Alternate Architectures image variants are here:
- https://alt.fedoraproject.org/alt/

** Mounting raw image

It requires some tricks to mount the 'raw' file. Via using the =losetup=
command:

#+begin_src sh
sudo losetup -f -P Fedora-Server-31-1.9.aarch64.raw
$ ls -1 /dev/loop*
/dev/loop0
/dev/loop1
/dev/loop1p1
/dev/loop1p2
/dev/loop1p3
/dev/loop-control
#+end_src

(Hint: Cleanup the /dev/loop1pX files via: =sudo losetup -D=)

The partition =/dev/loop1p3= contains the data, but we cannot mount it
directly because it is a LVM partition.
See full disk layout via: =fdisk -l /dev/loop1=.

#+begin_src sh
$ sudo mount /dev/loop1p3 /mnt/raw/
mount: /mnt/raw: unknown filesystem type 'LVM2_member'.
#+end_src

*** LVM tricks

Getting LVM help from guide:
- https://www.svennd.be/mount-unknown-filesystem-type-lvm2_member/

The =lvscan= shows an *inactive* =/dev/fedora/root= device.

#+begin_example
$ sudo lvscan
  /dev/sda: open failed: No medium found
  /dev/sdb: open failed: No medium found
  inactive          '/dev/fedora/root' [5,41 GiB] inherit
#+end_example

Activate it via: =vgchange -ay=

#+begin_src sh
$ sudo vgchange -ay
  1 logical volume(s) in volume group "fedora" now active
#+end_src

*** Mounting /dev/fedora/root

Now =/dev/fedora/root= have appeared, lets mount it. Mounting the RAW image
as root is important to get the file ownership permissions correct.

#+begin_example
sudo mkdir /mnt/fedora-rootfs
sudo mount /dev/fedora/root /mnt/fedora-rootfs
#+end_example


* Create SDcard

Given [[http://espressobin.net/tech-spec/][Espressobin download]] doesn't have Fedora 31, we have to create a boot
image from scratch.

Follow the instructions here:
- http://wiki.espressobin.net/tiki-index.php?page=Boot+from+removable+storage+-+Buildroot

** sdcard partition

On my system, sdcard device name was also /dev/sdb. Created partition
/dev/sdb1 and =ext4= formatted it like this:

#+begin_src sh
#(on laptop)
mkfs.ext4 -O ^metadata_csum,^64bit /dev/sdb1
#+end_src

Mount on laptop

#+begin_src sh
#(on laptop)
mkdir -p /mnt/sdcard
mount /dev/sdb1 /mnt/sdcard
#+end_src

** sdcard data

Ilias have been kind and created a rootfs tar.gz file for F31 here:
- http://people.linaro.org/~ilias.apalodimas/images/fedora-iot/Fedora-31-server-aarch64.tar.xz
- one gotcha: need to strip first directory 'media' via tar '--strip-components=1'
- second gotcha: most files have ownership id 1000

Alternatively download other distros from:
- http://espressobin.net/tech-spec/

Simply extract this rootfs into /mnt/sdcard/:

#+begin_src sh
#(on laptop)
tar xvf Fedora-31-server-aarch64.tar.xz --strip-components=1 -C /mnt/sdcard
#+end_src

Contents in /mnt/sdcard/boot/ :
#+begin_example
[laptop sdcard]# ll boot/
total 79416
-rw-r--r--. 1 root root    10590 Nov 13 12:58 armada-3720-espressobin.dtb
-rwxr-xr-x. 1 root root  9027813 Nov 13 12:58 Image
-rw-------. 1 root root 72276159 Nov 13 12:57 initramfs-5.3.7-301.fc31.aarch64.img
#+end_example

Remember to unmount:
#+begin_src sh
umount /mnt/sdcard
#+end_src

* Setup U-Boot on Espressobin

Again follow
- http://wiki.espressobin.net/tiki-index.php?page=Boot+from+removable+storage+-+Buildroot

** Initial failed boot
Without any setup boards fails to boot with following output:

#+begin_example
U-Boot 2017.03-armada-17.10.2-g255b9cc9c1 (Jun 10 2019 - 17:35:12 +0800)

Model: Marvell Armada 3720 Community Board ESPRESSOBin
       CPU    @ 1200 [MHz]
       L2     @ 800 [MHz]
       TClock @ 200 [MHz]
       DDR    @ 750 [MHz]
DRAM:  1 GiB
U-Boot DT blob at : 000000003f716298
Comphy-0: USB3          5 Gbps    
Comphy-1: PEX0          2.5 Gbps  
Comphy-2: SATA0         6 Gbps    
SATA link 0 timeout.
AHCI 0001.0300 32 slots 1 ports 6 Gbps 0x1 impl SATA mode
flags: ncq led only pmp fbss pio slum part sxs 
PCIE-0: Link down
MMC:   sdhci@d0000: 0, sdhci@d8000: 1
SF: Detected gd25lq32d with page size 256 Bytes, erase size 64 KiB, total 4 MiB
Net:   eth0: neta@30000 [PRIME]
Hit any key to stop autoboot:  0 
switch to partitions #0, OK
mmc0 is current device
9027813 bytes read in 400 ms (21.5 MiB/s)
 ** File not found boot/armada-3720-community-v7.dtb **
Bad Linux ARM64 Image magic!
Marvell>>
+end_example

** Setting U-Boot parameters

Listing contents of mmc:

#+begin_example
Marvell>> ext4ls mmc 0:1 boot
<DIR>       4096 .
<DIR>       4096 ..
           10590 armada-3720-espressobin.dtb
         9027813 Image
        72276159 initramfs-5.3.7-301.fc31.aarch64.img
Marvell>>
#+end_example

First, set the proper boot image name and device tree path and name:
#+begin_example
Marvell>> setenv image_name boot/Image
Marvell>> setenv fdt_name boot/armada-3720-espressobin.dtb
#+end_example

Next, define the bootmmc variable which we will use to boot from the microSD
card:
#+begin_example
setenv bootmmc 'mmc dev 0; ext4load mmc 0:1 $kernel_addr $image_name;ext4load mmc 0:1 $fdt_addr $fdt_name;setenv bootargs $console root=/dev/mmcblk0p1 rw rootwait; booti $kernel_addr - $fdt_addr'
saveenv
#+end_example

Booting fails:
#+begin_example
Marvell>> run bootmmc
switch to partitions #0, OK
mmc0 is current device
9027813 bytes read in 400 ms (21.5 MiB/s)
10590 bytes read in 6 ms (1.7 MiB/s)
Bad Linux ARM64 Image magic!
#+end_example

** Update kernel on SDcard

The kernel on SDcard seems be broken, try to update it.
Follow compile instruction in [[file:arm02_cross_compile_setup.org]].

Mount sdcard on laptop again.

In the kernel source, after compiling, the binary 'Image' file is located in
=arch/arm64/boot/Image=

#+begin_example
cp Image /mnt/sdcard/boot/
umount /mnt/sdcard
#+end_example

Booting kernel worked.

But new distro challenges:
#+begin_example
You are in emergency mode. After logging in, type "journalctl -xb" to view
system logs, "systemctl reboot" to reboot, "systemctl default" or "exit"
to boot into
Cannot open access to console, the root account is locked.
See sulogin(8) man page for more details.

Press Enter to continue.
#+end_example

** Populating /dev

The rootfs was extracted as root, but it seems that come files in =/dev=
have not been created correctly.

Getting help from:
- http://www.linuxfromscratch.org/lfs/view/6.1/chapter06/devices.html

Mount sdcard on laptop again.

Creating Initial Device Nodes:

When the kernel boots the system, it requires the presence of a few device
nodes, in particular the console and null devices. Create these by running
the following commands (as root):

#+begin_src sh
mknod -m 600 /mnt/sdcard/dev/console c 5 1
mknod -m 666 /mnt/sdcard/dev/null c 1 3
#+end_src

Also fix permissions on /tmp:
#+begin_src sh
chmod 1777 /mnt/sdcard/tmp
#+end_src

Issue: System still doesn't boot.

** Fixing etc/fstab and etc/shadow

Real issue seems to be related to not mounting rootfs:

#+begin_example
[ TIME ] Timed out waiting for device Â¦e-687a-49e0-9a7c-b9a403fc4027.
[DEPEND] Dependency failed for /boot.
[DEPEND] Dependency failed for /boot/efi.
[DEPEND] Dependency failed for Local File Systems.
[ TIME ] Timed out waiting for device /dev/disk/by-uuid/B7C7-D61F.
[DEPEND] Dependency failed for FileÃ¢Â¦n /dev/disk/by-uuid/B7C7-D61F.
#+end_example

Original /mnt/sdcard/etc/fstab contained:
#+begin_example
/dev/mapper/fedora-root /                       xfs     defaults        0 0
UUID=983cb62e-687a-49e0-9a7c-b9a403fc4027 /boot                   xfs     defaults        0 0
UUID=B7C7-D61F          /boot/efi               vfat    umask=0077,shortname=winnt 0 2
#+end_example

New entry in /mnt/sdcard/etc/fstab:
#+begin_example
/dev/mmcblk0p1   /boot                   ext4     defaults        0 0
#+end_example

Also edit =/mnt/sdcard/etc/shadow= and change root password to nothing.
Do remember to set a password after boot!




* Network setup

Keeping network simple via old-style =/etc/sysconfig/network-scripts/=
files.

** Network interfaces

Network interfaces available:
#+begin_example
[root@localhost /]# ip link ls
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
2: bond0: <BROADCAST,MULTICAST,MASTER> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000
    link/ether de:27:5e:43:ee:50 brd ff:ff:ff:ff:ff:ff
3: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1508 qdisc mq state UP mode DEFAULT group default qlen 1024
    link/ether 6e:a2:a3:96:32:71 brd ff:ff:ff:ff:ff:ff
4: wan@eth0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state LOWERLAYERDOWN mode DEFAULT group default qlen 1000
    link/ether 2a:42:5f:1f:43:fb brd ff:ff:ff:ff:ff:ff
5: lan0@eth0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state LOWERLAYERDOWN mode DEFAULT group default qlen 1000
    link/ether f6:e0:e5:99:b5:22 brd ff:ff:ff:ff:ff:ff
6: lan1@eth0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state LOWERLAYERDOWN mode DEFAULT group default qlen 1000
    link/ether 8a:a3:cf:35:00:5a brd ff:ff:ff:ff:ff:ff
#+end_example

#+begin_example
ethtool -i wan | grep driver
driver: dsa
#+end_example

** Setup network old style (failed)

File: /etc/sysconfig/network-scripts/ifcfg-wan

#+begin_example
NM_CONTROLLED="no"
NAME="wan"
ONBOOT="yes"
TYPE="Ethernet"
BOOTPROTO="none"
DEFROUTE="no"
IPV4_FAILURE_FATAL="no"
IPV6INIT="no"
IPV6_AUTOCONF="no"
IPV6_DEFROUTE="no"
IPV6_FAILURE_FATAL="no"
#IPV6_PEERDNS="yes"
#IPV6_PEERROUTES="yes"
IPADDR=192.168.42.44
PREFIX=24
#+end_example

Very strange, command =ifup= says it cannot load the file, even-though it
does exist:
#+begin_example
[root@localhost /]# ls -l /etc/sysconfig/network-scripts/ifcfg-wan
-rw-r--r-- 1 root root 245 Oct 10 09:19 /etc/sysconfig/network-scripts/ifcfg-wan

[root@localhost /]# ifup wan
Could not load file '/etc/sysconfig/network-scripts/ifcfg-wan'
Error: unknown connection '/etc/sysconfig/network-scripts/ifcfg-wan'.
#+end_example

** Setup network new style (NetworkManager)

Still want/need to strictly use cmdline tools for network setup, given the
access is over USB serial cable (via minicom).

*** List current setup via nmcli
Trying out =nmcli= command:
#+begin_src sh
# nmcli
wan: connected to Wired connection 4
        "wan"
        ethernet (mv88e6085), 2A:42:5F:1F:43:FB, hw, mtu 1500
        ip4 default
        inet4 192.168.42.226/24
        route4 0.0.0.0/0
        route4 192.168.42.0/24
        inet6 fe80::3d09:5fb4:404c:bc9b/64
        route6 fe80::/64
        route6 ff00::/8

eth0: connecting (getting IP configuration) to Wired connection 1
        "eth0"
        ethernet (mvneta), 6E:A2:A3:96:32:71, hw, mtu 1508

lan0: unavailable
        "lan0"
        ethernet (mv88e6085), F6:E0:E5:99:B5:22, hw, mtu 1500

lan1: unavailable
        "lan1"
        ethernet (mv88e6085), 8A:A3:CF:35:00:5A, hw, mtu 1500
#+end_src

*** Task: Setup static IP-address in 'wan'

List connections:
#+begin_example
# nmcli connection
NAME                UUID                                  TYPE      DEVICE 
Wired connection 4  7b62939e-5b3c-3876-84f6-87aa08be43f3  ethernet  wan    
Wired connection 1  475e922f-bf29-3517-847a-697dc42b699c  ethernet  --     
Wired connection 2  162d9794-6481-3ab7-a3ac-258d93167b3d  ethernet  --     
Wired connection 3  cff3dfb2-2788-3209-b681-0225fd02a60e  ethernet  --     
#+end_example

We guess that UUID '7b62939e-5b3c-3876-84f6-87aa08be43f3' is the connection
we want to modify.

#+begin_src sh
nmcli connection modify 7b62939e-5b3c-3876-84f6-87aa08be43f3 IPv4.address 192.168.42.44/24
nmcli connection modify 7b62939e-5b3c-3876-84f6-87aa08be43f3 IPv4.gateway 192.168.42.1
nmcli connection modify 7b62939e-5b3c-3876-84f6-87aa08be43f3 IPv4.dns 1.1.1.1
nmcli connection modify 7b62939e-5b3c-3876-84f6-87aa08be43f3 IPv4.method manual
#+end_src

Restart network to apply changes:

#+begin_src sh
nmcli connection down 7b62939e-5b3c-3876-84f6-87aa08be43f3 ;\
nmcli connection up   7b62939e-5b3c-3876-84f6-87aa08be43f3
#+end_src


* Installing extra software

** Installing LLVM version 9

It is a priority to get LLVM9 working on arm64.
#+begin_example
dnf install -y llvm

Last metadata expiration check: 0:00:03 ago on Tue 19 Nov 2019 09:20:48 AM EST.
Dependencies resolved.
================================================================================
 Package           Architecture    Version                 Repository      Size
================================================================================
Installing:
 llvm              aarch64         9.0.0-1.fc31            fedora         4.2 M
Installing dependencies:
 llvm-libs         aarch64         9.0.0-1.fc31            fedora          20 M

Transaction Summary
================================================================================
Install  2 Packages

Total download size: 24 M
Installed size: 107 M
#+end_example

Success and 'llc --version' shows a lot of targets, including BPF.
#+begin_example
# llc --version
LLVM (http://llvm.org/):
  LLVM version 9.0.0
  Optimized build.
  Default target: aarch64-unknown-linux-gnu
  Host CPU: cortex-a53

  Registered Targets:
    aarch64    - AArch64 (little endian)
    aarch64_32 - AArch64 (little endian ILP32)
    aarch64_be - AArch64 (big endian)
    amdgcn     - AMD GCN GPUs
    arm        - ARM
    arm64      - ARM64 (little endian)
    arm64_32   - ARM64 (little endian ILP32)
    armeb      - ARM (big endian)
    avr        - Atmel AVR Microcontroller
    bpf        - BPF (host endian)
    bpfeb      - BPF (big endian)
    bpfel      - BPF (little endian)
    hexagon    - Hexagon
    lanai      - Lanai
    mips       - MIPS (32-bit big endian)
    mips64     - MIPS (64-bit big endian)
    mips64el   - MIPS (64-bit little endian)
    mipsel     - MIPS (32-bit little endian)
    msp430     - MSP430 [experimental]
    nvptx      - NVIDIA PTX 32-bit
    nvptx64    - NVIDIA PTX 64-bit
    ppc32      - PowerPC 32
    ppc64      - PowerPC 64
    ppc64le    - PowerPC 64 LE
    r600       - AMD GPUs HD2XXX-HD6XXX
    riscv32    - 32-bit RISC-V
    riscv64    - 64-bit RISC-V
    sparc      - Sparc
    sparcel    - Sparc LE
    sparcv9    - Sparc V9
    systemz    - SystemZ
    thumb      - Thumb
    thumbeb    - Thumb (big endian)
    wasm32     - WebAssembly 32-bit
    wasm64     - WebAssembly 64-bit
    x86        - 32-bit X86: Pentium-Pro and above
    x86-64     - 64-bit X86: EM64T and AMD64
    xcore      - XCore
#+end_example
