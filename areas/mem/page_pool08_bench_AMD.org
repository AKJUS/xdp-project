# -*- fill-column: 76; -*-
#+Title: Benchmark page_pool on AMD CPU
#+OPTIONS: ^:nil

* Document index (autogenerated)  :toc:
- [[#intel-results][Intel results]]
- [[#amd-results1-pp01-dma-fix-v7][AMD results#1: pp01-DMA-fix-v7]]
  - [[#amd-cpu---devel-kernel-pp01-dma-fix-v7][AMD CPU - devel kernel pp01-DMA-fix-v7]]
  - [[#change-srso-mode-ibpb][Change SRSO mode: IBPB]]
- [[#code][Code]]
  - [[#page_pool-code-changes-made-it-worse][page_pool code changes made it worse]]
  - [[#mitigation-patch-attempt-1][Mitigation patch attempt #1]]
- [[#amd-results2-6130-traits-006-skb][AMD results#2: 6.13.0-traits-006-skb+]]
  - [[#amd-cpu---kernel-6130][AMD CPU - kernel 6.13.0]]
  - [[#change-srso-mode-ibpb-1][Change SRSO mode: IBPB]]
- [[#amd-testing-patches][AMD testing patches]]
  - [[#mitigation-patch1][Mitigation patch#1]]

* Intel results

Intel CPU E5-1650 was benchmarked in [[file:page_pool07_bench_DMA_fix.org]].

Table summary for baseline, with bench_page_pool_simple results:

| Test name   | Cycles | Nanosec |
| (tasklet_*) |        |         |
|-------------+--------+---------|
| fast_path   |     19 |   5.399 |
| ptr_ring    |     54 |  15.090 |
| slow        |    238 |  66.134 |

* AMD results#1: pp01-DMA-fix-v7

CPU: AMD EPYC 9684X 96-Core Processor (CF Gen 12)

** AMD CPU - devel kernel pp01-DMA-fix-v7

Kernel: 6.13.0-rc6-pp01-DMA-fix-v7+

Compare table: Intel-baseline vs AMD-patched:

| Test name   | Cycles |     |      | Nanosec |         |        |      % |
| (tasklet_*) |  Intel | AMD | diff |   Intel |     AMD |   diff | change |
|-------------+--------+-----+------+---------+---------+--------+--------|
| fast_path   |     19 |  54 |   35 |   5.399 |  21.256 | 15.857 |  293.7 |
| ptr_ring    |     54 | 118 |   64 |  15.090 |  46.668 | 31.578 |  209.3 |
| slow        |    238 | 354 |  116 |  66.134 | 139.400 | 73.266 |  110.8 |
#+TBLFM: $4=$3-$2::$7=$6-$5::$8=(($7/$5)*100);%.1f

Raw data:
#+begin_example
 bench_page_pool_simple: Loaded
 time_bench: Type:for_loop Per elem: 1 cycles(tsc) 0.543 ns (step:0) - (measurement period time:0.054322042 sec time_interval:54322042) - (invoke count:100000000 tsc_interval:138312637)
 time_bench: Type:atomic_inc Per elem: 4 cycles(tsc) 1.732 ns (step:0) - (measurement period time:0.173226385 sec time_interval:173226385) - (invoke count:100000000 tsc_interval:441064065)
 time_bench: Type:lock Per elem: 37 cycles(tsc) 14.659 ns (step:0) - (measurement period time:0.146598674 sec time_interval:146598674) - (invoke count:10000000 tsc_interval:373264716)
 bench_page_pool_simple: time_bench_page_pool01_fast_path(): Cannot use page_pool fast-path
 time_bench: Type:no-softirq-page_pool01 Per elem: 53 cycles(tsc) 21.197 ns (step:0) - (measurement period time:0.211978152 sec time_interval:211978152) - (invoke count:10000000 tsc_interval:539731955)
 bench_page_pool_simple: time_bench_page_pool02_ptr_ring(): Cannot use page_pool fast-path
 time_bench: Type:no-softirq-page_pool02 Per elem: 89 cycles(tsc) 35.316 ns (step:0) - (measurement period time:0.353166180 sec time_interval:353166180) - (invoke count:10000000 tsc_interval:899222004)
 bench_page_pool_simple: time_bench_page_pool03_slow(): Cannot use page_pool fast-path
 time_bench: Type:no-softirq-page_pool03 Per elem: 317 cycles(tsc) 124.732 ns (step:0) - (measurement period time:1.247323944 sec time_interval:1247323944) - (invoke count:10000000 tsc_interval:3175903951)
 bench_page_pool_simple: pp_tasklet_handler(): in_serving_softirq fast-path
 bench_page_pool_simple: time_bench_page_pool01_fast_path(): in_serving_softirq fast-path
 time_bench: Type:tasklet_page_pool01_fast_path Per elem: 54 cycles(tsc) 21.256 ns (step:0) - (measurement period time:0.212565703 sec time_interval:212565703) - (invoke count:10000000 tsc_interval:541227708)
 bench_page_pool_simple: time_bench_page_pool02_ptr_ring(): in_serving_softirq fast-path
 time_bench: Type:tasklet_page_pool02_ptr_ring Per elem: 118 cycles(tsc) 46.668 ns (step:0) - (measurement period time:0.466686939 sec time_interval:466686939) - (invoke count:10000000 tsc_interval:1188265830)
 bench_page_pool_simple: time_bench_page_pool03_slow(): in_serving_softirq fast-path
 time_bench: Type:tasklet_page_pool03_slow Per elem: 354 cycles(tsc) 139.400 ns (step:0) - (measurement period time:1.394000956 sec time_interval:1394000956) - (invoke count:10000000 tsc_interval:3549369301)
#+end_example

** Change SRSO mode: IBPB

Same kernel: 6.13.0-rc6-pp01-DMA-fix-v7+
 - booted with SRSO cmdline: spec_rstack_overflow=ibpb

#+begin_src sh
sudo kexec -l --initrd=/boot/initrd.img-6.13.0-rc6-pp01-DMA-fix-v7+  '--append=root=UUID=ab25bbdd-c315-497d-b12e-ea9ccf76a1e1 ro spec_rstack_overflow=ibpb net.ifnames=0 console=tty0 console=ttyS0,115200n8 '  -- /boot/vmlinuz-6.13.0-rc6-pp01-DMA-fix-v7+
#+end_src

Compare table: Intel-baseline vs AMD-with-SRSO-mode-IBPB:
 - *Focus on nanosec time* as AMD TSC clock runs slower than turbo GHz

| Test name   | Cycles |     |      | Nanosec |        |         |      % |
| (tasklet_*) |  Intel | AMD | diff |   Intel |    AMD |    diff | change |
|-------------+--------+-----+------+---------+--------+---------+--------|
| fast_path   |     19 |  14 |   -5 |   5.399 |  5.555 |   0.156 |    2.9 |
| ptr_ring    |     54 |  31 |  -23 |  15.090 | 12.389 |  -2.701 |  -17.9 |
| slow        |    238 |  95 | -143 |  66.134 | 37.607 | -28.527 |  -43.1 |
#+TBLFM: $4=$3-$2::$7=$6-$5::$8=(($7/$5)*100);%.1f

It looks like performance regression is *caused by side-channel mitigation SRSO*
 - https://docs.kernel.org/admin-guide/hw-vuln/srso.html

Raw data:
#+begin_example
[   63.470944] bench_page_pool_simple: Loaded
[   63.529856] time_bench: Type:for_loop Per elem: 1 cycles(tsc) 0.543 ns (step:0) - (measurement period time:0.054322298 sec time_interval:54322298) - (invoke count:100000000 tsc_interval:138312357)
[   63.739017] time_bench: Type:atomic_inc Per elem: 4 cycles(tsc) 1.896 ns (step:0) - (measurement period time:0.189646034 sec time_interval:189646034) - (invoke count:100000000 tsc_interval:482870371)
[   63.818542] time_bench: Type:lock Per elem: 15 cycles(tsc) 5.971 ns (step:0) - (measurement period time:0.059719740 sec time_interval:59719740) - (invoke count:10000000 tsc_interval:152055429)
[   63.837774] bench_page_pool_simple: time_bench_page_pool01_fast_path(): Cannot use page_pool fast-path
[   63.903016] time_bench: Type:no-softirq-page_pool01 Per elem: 13 cycles(tsc) 5.482 ns (step:0) - (measurement period time:0.054820667 sec time_interval:54820667) - (invoke count:10000000 tsc_interval:139581645)
[   63.923912] bench_page_pool_simple: time_bench_page_pool02_ptr_ring(): Cannot use page_pool fast-path
[   64.025630] time_bench: Type:no-softirq-page_pool02 Per elem: 23 cycles(tsc) 9.141 ns (step:0) - (measurement period time:0.091415141 sec time_interval:91415141) - (invoke count:10000000 tsc_interval:232757447)
[   64.046530] bench_page_pool_simple: time_bench_page_pool03_slow(): Cannot use page_pool fast-path
[   64.420369] time_bench: Type:no-softirq-page_pool03 Per elem: 92 cycles(tsc) 36.383 ns (step:0) - (measurement period time:0.363832351 sec time_interval:363832351) - (invoke count:10000000 tsc_interval:926378204)
[   64.441499] bench_page_pool_simple: pp_tasklet_handler(): in_serving_softirq fast-path
[   64.450372] bench_page_pool_simple: time_bench_page_pool01_fast_path(): in_serving_softirq fast-path
[   64.516143] time_bench: Type:tasklet_page_pool01_fast_path Per elem: 14 cycles(tsc) 5.555 ns (step:0) - (measurement period time:0.055554086 sec time_interval:55554086) - (invoke count:10000000 tsc_interval:141449469)
[   64.537713] bench_page_pool_simple: time_bench_page_pool02_ptr_ring(): in_serving_softirq fast-path
[   64.671718] time_bench: Type:tasklet_page_pool02_ptr_ring Per elem: 31 cycles(tsc) 12.389 ns (step:0) - (measurement period time:0.123894439 sec time_interval:123894439) - (invoke count:10000000 tsc_interval:315455068)
[   64.693384] bench_page_pool_simple: time_bench_page_pool03_slow(): in_serving_softirq fast-path
[   65.079181] time_bench: Type:tasklet_page_pool03_slow Per elem: 95 cycles(tsc) 37.607 ns (step:0) - (measurement period time:0.376078904 sec time_interval:376078904) - (invoke count:10000000 tsc_interval:957559603)
#+end_example


* Code

** page_pool code changes made it worse

Some recent page_pool code changes is making this worse.

The (exported) function call =page_pool_alloc_pages()= was changed to call
=page_pool_alloc_netmems()=, which cannot be inlined as it is also exported.
This extra function call cause SRSO overhead for a very small wrapper function,
which is a critical fast-path function call.

See [[https://elixir.bootlin.com/linux/v6.14-rc3/source/net/core/page_pool.c#L580-L603][code section]] from v6.14-rc3 :

#+begin_src C
netmem_ref page_pool_alloc_netmems(struct page_pool *pool, gfp_t gfp)
{
	netmem_ref netmem;

	/* Fast-path: Get a page from cache */
	netmem = __page_pool_get_cached(pool);
	if (netmem)
		return netmem;

	/* Slow-path: cache empty, do real allocation */
	if (static_branch_unlikely(&page_pool_mem_providers) && pool->mp_ops)
		netmem = pool->mp_ops->alloc_netmems(pool, gfp);
	else
		netmem = __page_pool_alloc_pages_slow(pool, gfp);
	return netmem;
}
EXPORT_SYMBOL(page_pool_alloc_netmems);
ALLOW_ERROR_INJECTION(page_pool_alloc_netmems, NULL);

struct page *page_pool_alloc_pages(struct page_pool *pool, gfp_t gfp)
{
	return netmem_to_page(page_pool_alloc_netmems(pool, gfp));
}
EXPORT_SYMBOL(page_pool_alloc_pages);
#+end_src

This was changed in commit:
 - https://git.kernel.org/torvalds/c/4dec64c52e24 ("page_pool: convert to use netmem")
 - git describe --contains  4dec64c52e24
 - v6.11-rc1~163^2~102^2~1

** Mitigation patch attempt #1

Changing code to allow for inlining.

PoC code change:
#+begin_src diff
diff --git a/net/core/page_pool.c b/net/core/page_pool.c
index acef1fcd8ddc..54bdb231c2a1 100644
--- a/net/core/page_pool.c
+++ b/net/core/page_pool.c
@@ -585,7 +585,8 @@ static noinline netmem_ref __page_pool_alloc_pages_slow(struct page_pool *pool,
 /* For using page_pool replace: alloc_pages() API calls, but provide
  * synchronization guarantee for allocation side.
  */
-netmem_ref page_pool_alloc_netmems(struct page_pool *pool, gfp_t gfp)
+static
+netmem_ref __page_pool_alloc_netmems(struct page_pool *pool, gfp_t gfp)
 {
        netmem_ref netmem;
 
@@ -601,12 +602,17 @@ netmem_ref page_pool_alloc_netmems(struct page_pool *pool, gfp_t gfp)
                netmem = __page_pool_alloc_pages_slow(pool, gfp);
        return netmem;
 }
+
+netmem_ref page_pool_alloc_netmems(struct page_pool *pool, gfp_t gfp)
+{
+       return __page_pool_alloc_netmems(pool, gfp);
+}
 EXPORT_SYMBOL(page_pool_alloc_netmems);
 ALLOW_ERROR_INJECTION(page_pool_alloc_netmems, NULL);
 
 struct page *page_pool_alloc_pages(struct page_pool *pool, gfp_t gfp)
 {
-       return netmem_to_page(page_pool_alloc_netmems(pool, gfp));
+       return netmem_to_page(__page_pool_alloc_netmems(pool, gfp));
 }
 EXPORT_SYMBOL(page_pool_alloc_pages);
#+end_src

* AMD results#2: 6.13.0-traits-006-skb+

Redo benchmark on kernel v6.13 without DMA-fix patches as they have their own
page_pool slowdown.

The kernel also contains traits-006 patchset.
 - https://github.com/arthurfabre/linux/commits/afabre/traits-006-skb
 - BUT this patchset doesn't modify page_pool code

** AMD CPU - kernel 6.13.0

CPU: AMD EPYC 9684X 96-Core Processor (CF Gen 12)

Kernel: 6.13.0-traits-006-skb+

Compare table: Intel-baseline vs AMD with SRSO-default:
 - *Focus on nanosec time* as AMD TSC clock runs slower than turbo GHz

| Test name   | Cycles |     |      | *Nanosec* |        |        |      % |
| (tasklet_*) |  Intel | AMD | diff |     Intel |    AMD |   diff | change |
|-------------+--------+-----+------+-----------+--------+--------+--------|
| fast_path   |     19 |  36 |   17 |     5.399 | 14.166 |  8.767 |  162.4 |
| ptr_ring    |     54 |  87 |   33 |    15.090 | 34.217 | 19.127 |  126.8 |
| slow        |    238 | 241 |    3 |    66.134 | 94.926 | 28.792 |   43.5 |
#+TBLFM: $4=$3-$2::$7=$6-$5::$8=(($7/$5)*100);%.1f

Raw data:
#+begin_example
 bench_page_pool_simple: Loaded
 time_bench: Type:for_loop Per elem: 1 cycles(tsc) 0.544 ns (step:0) - (measurement period time:0.054447996 sec time_interval:54447996) - (invoke count:100000000 tsc_interval:138632535)
 time_bench: Type:atomic_inc Per elem: 4 cycles(tsc) 1.778 ns (step:0) - (measurement period time:0.177843687 sec time_interval:177843687) - (invoke count:100000000 tsc_interval:452819285)
 time_bench: Type:lock Per elem: 34 cycles(tsc) 13.563 ns (step:0) - (measurement period time:0.135639490 sec time_interval:135639490) - (invoke count:10000000 tsc_interval:345360015)
 bench_page_pool_simple: time_bench_page_pool01_fast_path(): Cannot use page_pool fast-path
 time_bench: Type:no-softirq-page_pool01 Per elem: 35 cycles(tsc) 14.133 ns (step:0) - (measurement period time:0.141338395 sec time_interval:141338395) - (invoke count:10000000 tsc_interval:359870229)
 bench_page_pool_simple: time_bench_page_pool02_ptr_ring(): Cannot use page_pool fast-path
 time_bench: Type:no-softirq-page_pool02 Per elem: 90 cycles(tsc) 35.568 ns (step:0) - (measurement period time:0.355686572 sec time_interval:355686572) - (invoke count:10000000 tsc_interval:905637906)
 bench_page_pool_simple: time_bench_page_pool03_slow(): Cannot use page_pool fast-path
 time_bench: Type:no-softirq-page_pool03 Per elem: 240 cycles(tsc) 94.379 ns (step:0) - (measurement period time:0.943790155 sec time_interval:943790155) - (invoke count:10000000 tsc_interval:2403051252)
 bench_page_pool_simple: pp_tasklet_handler(): in_serving_softirq fast-path
 bench_page_pool_simple: time_bench_page_pool01_fast_path(): in_serving_softirq fast-path
 time_bench: Type:tasklet_page_pool01_fast_path Per elem: 36 cycles(tsc) 14.166 ns (step:0) - (measurement period time:0.141664105 sec time_interval:141664105) - (invoke count:10000000 tsc_interval:360699897)
 bench_page_pool_simple: time_bench_page_pool02_ptr_ring(): in_serving_softirq fast-path
 time_bench: Type:tasklet_page_pool02_ptr_ring Per elem: 87 cycles(tsc) 34.217 ns (step:0) - (measurement period time:0.342176491 sec time_interval:342176491) - (invoke count:10000000 tsc_interval:871239196)
 bench_page_pool_simple: time_bench_page_pool03_slow(): in_serving_softirq fast-path
 time_bench: Type:tasklet_page_pool03_slow Per elem: 241 cycles(tsc) 94.926 ns (step:0) - (measurement period time:0.949261208 sec time_interval:949261208) - (invoke count:10000000 tsc_interval:2416980933)
#+end_example

*** time_bench_sample - with SRSO

The time_bench_sample gives us an idea of overhead of different base kernel
operations.

Raw data: time_bench_sample
#+begin_example
modprobe time_bench_sample
 time_bench_sample: Loaded
 time_bench: Type:for_loop Per elem: 0 cycles(tsc) 0.271 ns (step:0) - (measurement period time:0.271507824 sec time_interval:271507824) - (invoke count:1000000000 tsc_interval:691304694)
 time_bench: Type:spin_lock_unlock Per elem: 37 cycles(tsc) 14.586 ns (step:0) - (measurement period time:1.458634863 sec time_interval:1458634863) - (invoke count:100000000 tsc_interval:3713934342)
 time_bench: Type:spin_lock_unlock_irqsave Per elem: 52 cycles(tsc) 20.665 ns (step:0) - (measurement period time:1.033273196 sec time_interval:1033273196) - (invoke count:50000000 tsc_interval:2630889698)
 time_bench: Type:irqsave_before_lock Per elem: 49 cycles(tsc) 19.303 ns (step:0) - (measurement period time:0.965167717 sec time_interval:965167717) - (invoke count:50000000 tsc_interval:2457482150)
 time_bench: Type:spin_lock_unlock_irq Per elem: 47 cycles(tsc) 18.716 ns (step:0) - (measurement period time:0.935827261 sec time_interval:935827261) - (invoke count:50000000 tsc_interval:2382776151)
 time_bench: Type:simple_irq_disable_before_lock Per elem: 42 cycles(tsc) 16.587 ns (step:0) - (measurement period time:0.829353464 sec time_interval:829353464) - (invoke count:50000000 tsc_interval:2111674609)
 time_bench: Type:local_BH_disable_enable Per elem: 18 cycles(tsc) 7.159 ns (step:0) - (measurement period time:0.715975323 sec time_interval:715975323) - (invoke count:100000000 tsc_interval:1822994337)
 time_bench: Type:local_IRQ_disable_enable Per elem: 11 cycles(tsc) 4.346 ns (step:0) - (measurement period time:0.434623260 sec time_interval:434623260) - (invoke count:100000000 tsc_interval:1106624137)
 time_bench: Type:local_irq_save_restore Per elem: 10 cycles(tsc) 4.082 ns (step:0) - (measurement period time:0.408223079 sec time_interval:408223079) - (invoke count:100000000 tsc_interval:1039404735)
 time_bench: Type:preempt_disable_enable Per elem: 2 cycles(tsc) 0.815 ns (step:0) - (measurement period time:0.081548269 sec time_interval:81548269) - (invoke count:100000000 tsc_interval:207635331)
 time_bench: Type:this_cpu_cmpxchg Per elem: 6 cycles(tsc) 2.378 ns (step:0) - (measurement period time:0.237862706 sec time_interval:237862706) - (invoke count:100000000 tsc_interval:605637954)
 time_bench: Type:cmpxchg Per elem: 6 cycles(tsc) 2.369 ns (step:0) - (measurement period time:0.118484218 sec time_interval:118484218) - (invoke count:50000000 tsc_interval:301679968)
 time_bench: Type:funcion_call_cost Per elem: 14 cycles(tsc) 5.705 ns (step:0) - (measurement period time:0.570573658 sec time_interval:570573658) - (invoke count:100000000 tsc_interval:1452777075)
 time_bench: Type:func_ptr_call_cost Per elem: 26 cycles(tsc) 10.328 ns (step:0) - (measurement period time:1.032857622 sec time_interval:1032857622) - (invoke count:100000000 tsc_interval:2629832161)
 time_bench: Type:page_alloc_put Per elem: 381 cycles(tsc) 149.846 ns (step:0) - (measurement period time:0.149846657 sec time_interval:149846657) - (invoke count:1000000 tsc_interval:381534086)
#+end_example

*** bench_traits_simple - with SRSO

Also collect traits data as this kernel is our traits devel kernel.

Raw data: bench_traits_simple
#+begin_example
modprobe bench_traits_simple
 bench_traits_simple: Loaded
 time_bench: Type:for_loop Per elem: 0 cycles(tsc) 0.271 ns (step:0) - (measurement period time:0.027188665 sec time_interval:27188665) - (invoke count:100000000 tsc_interval:69225844)
 time_bench: Type:function_call_cost Per elem: 14 cycles(tsc) 5.702 ns (step:0) - (measurement period time:0.057021620 sec time_interval:57021620) - (invoke count:10000000 tsc_interval:145185984)
 time_bench: Type:func_ptr_call_cost Per elem: 26 cycles(tsc) 10.335 ns (step:0) - (measurement period time:0.103354034 sec time_interval:103354034) - (invoke count:10000000 tsc_interval:263155997)
 time_bench: Type:trait_set Per elem: 22 cycles(tsc) 8.979 ns (step:0) - (measurement period time:0.089793457 sec time_interval:89793457) - (invoke count:10000000 tsc_interval:228628359)
 time_bench: Type:trait_get Per elem: 24 cycles(tsc) 9.791 ns (step:0) - (measurement period time:0.097910502 sec time_interval:97910502) - (invoke count:10000000 tsc_interval:249295268)
#+end_example

** Change SRSO mode: IBPB

Booting kernel 6.13.0-traits-006-skb+
 - with SRSO cmdline: spec_rstack_overflow=ibpb

#+begin_example
sudo kexec -l --initrd=/boot/initrd.img-6.13.0-traits-006-skb+  '--append=root=UUID=ab25bbdd-c315-497d-b12e-ea9ccf76a1e1 ro spec_rstack_overflow=ibpb net.ifnames=0 console=tty0 console=ttyS0,115200n8 '  -- /boot/vmlinuz-6.13.0-traits-006-skb+
sudo systemctl kexec
#+end_example

Compare table: AMD with SRSO-default vs SRSO=IBPB:

| Test name   | Cycles |      |      | *Nanosec* |        |         |      % |
| (tasklet_*) |   SRSO | IBPB | diff |      SRSO |   IBPB |    diff | change |
|-------------+--------+------+------+-----------+--------+---------+--------|
| fast_path   |     36 |    9 |  -27 |    14.166 |  3.801 | -10.365 |  -73.2 |
| ptr_ring    |     87 |   26 |  -61 |    34.217 | 10.526 | -23.691 |  -69.2 |
| slow        |    241 |   78 | -163 |    94.926 | 30.646 |  -64.28 |  -67.7 |
#+TBLFM: $4=$3-$2::$7=$6-$5::$8=(($7/$5)*100);%.1f

Compare table: Intel-baseline vs AMD with SRSO=IBPB:
 - *Focus on nanosec time* as AMD TSC clock runs slower than turbo GHz

| Test name   | Cycles | *IBPB* |      | *Nanosec* | *IBPB* |         |      % |
| (tasklet_*) |  Intel |    AMD | diff |     Intel |    AMD |    diff | change |
|-------------+--------+--------+------+-----------+--------+---------+--------|
| fast_path   |     19 |      9 |  -10 |     5.399 |  3.801 |  -1.598 |  -29.6 |
| ptr_ring    |     54 |     26 |  -28 |    15.090 | 10.526 |  -4.564 |  -30.2 |
| slow        |    238 |     78 | -160 |    66.134 | 30.646 | -35.488 |  -53.7 |
#+TBLFM: $4=$3-$2::$7=$6-$5::$8=(($7/$5)*100);%.1f

Raw data: modprobe bench_page_pool_simple
#+begin_example
 bench_page_pool_simple: Loaded
 time_bench: Type:for_loop Per elem: 1 cycles(tsc) 0.543 ns (step:0) - (measurement period time:0.054332348 sec time_interval:54332348) - (invoke count:100000000 tsc_interval:138338928)
 time_bench: Type:atomic_inc Per elem: 4 cycles(tsc) 1.850 ns (step:0) - (measurement period time:0.185091112 sec time_interval:185091112) - (invoke count:100000000 tsc_interval:471272665)
 time_bench: Type:lock Per elem: 15 cycles(tsc) 5.970 ns (step:0) - (measurement period time:0.059705362 sec time_interval:59705362) - (invoke count:10000000 tsc_interval:152019143)
 bench_page_pool_simple: time_bench_page_pool01_fast_path(): Cannot use page_pool fast-path
 time_bench: Type:no-softirq-page_pool01 Per elem: 9 cycles(tsc) 3.858 ns (step:0) - (measurement period time:0.038585777 sec time_interval:38585777) - (invoke count:10000000 tsc_interval:98244972)
 bench_page_pool_simple: time_bench_page_pool02_ptr_ring(): Cannot use page_pool fast-path
 time_bench: Type:no-softirq-page_pool02 Per elem: 28 cycles(tsc) 11.343 ns (step:0) - (measurement period time:0.113431501 sec time_interval:113431501) - (invoke count:10000000 tsc_interval:288815320)
 bench_page_pool_simple: time_bench_page_pool03_slow(): Cannot use page_pool fast-path
 time_bench: Type:no-softirq-page_pool03 Per elem: 76 cycles(tsc) 29.994 ns (step:0) - (measurement period time:0.299943355 sec time_interval:299943355) - (invoke count:10000000 tsc_interval:763706283)
 bench_page_pool_simple: pp_tasklet_handler(): in_serving_softirq fast-path
 bench_page_pool_simple: time_bench_page_pool01_fast_path(): in_serving_softirq fast-path
 time_bench: Type:tasklet_page_pool01_fast_path Per elem: 9 cycles(tsc) 3.801 ns (step:0) - (measurement period time:0.038018776 sec time_interval:38018776) - (invoke count:10000000 tsc_interval:96801111)
 bench_page_pool_simple: time_bench_page_pool02_ptr_ring(): in_serving_softirq fast-path
 time_bench: Type:tasklet_page_pool02_ptr_ring Per elem: 26 cycles(tsc) 10.526 ns (step:0) - (measurement period time:0.105266937 sec time_interval:105266937) - (invoke count:10000000 tsc_interval:268027236)
 bench_page_pool_simple: time_bench_page_pool03_slow(): in_serving_softirq fast-path
 time_bench: Type:tasklet_page_pool03_slow Per elem: 78 cycles(tsc) 30.646 ns (step:0) - (measurement period time:0.306461417 sec time_interval:306461417) - (invoke count:10000000 tsc_interval:780302091)
#+end_example

*** time_bench_sample - with SRSO=IBPB

The time_bench_sample gives us an idea of overhead of different base kernel
operations.

Raw data: time_bench_sample
#+begin_example
 time_bench_sample: Loaded
 time_bench: Type:for_loop Per elem: 0 cycles(tsc) 0.271 ns (step:0) - (measurement period time:0.271174661 sec time_interval:271174661) - (invoke count:1000000000 tsc_interval:690456539)
 time_bench: Type:spin_lock_unlock Per elem: 15 cycles(tsc) 5.969 ns (step:0) - (measurement period time:0.596907148 sec time_interval:596907148) - (invoke count:100000000 tsc_interval:1519827285)
 time_bench: Type:spin_lock_unlock_irqsave Per elem: 16 cycles(tsc) 6.514 ns (step:0) - (measurement period time:0.325701231 sec time_interval:325701231) - (invoke count:50000000 tsc_interval:829290167)
 time_bench: Type:irqsave_before_lock Per elem: 16 cycles(tsc) 6.516 ns (step:0) - (measurement period time:0.325842522 sec time_interval:325842522) - (invoke count:50000000 tsc_interval:829650329)
 time_bench: Type:spin_lock_unlock_irq Per elem: 17 cycles(tsc) 7.008 ns (step:0) - (measurement period time:0.350405775 sec time_interval:350405775) - (invoke count:50000000 tsc_interval:892192699)
 time_bench: Type:simple_irq_disable_before_lock Per elem: 16 cycles(tsc) 6.514 ns (step:0) - (measurement period time:0.325731256 sec time_interval:325731256) - (invoke count:50000000 tsc_interval:829366718)
 time_bench: Type:local_BH_disable_enable Per elem: 4 cycles(tsc) 1.900 ns (step:0) - (measurement period time:0.190012327 sec time_interval:190012327) - (invoke count:100000000 tsc_interval:483802779)
 time_bench: Type:local_IRQ_disable_enable Per elem: 11 cycles(tsc) 4.342 ns (step:0) - (measurement period time:0.434208241 sec time_interval:434208241) - (invoke count:100000000 tsc_interval:1105568565)
 time_bench: Type:local_irq_save_restore Per elem: 10 cycles(tsc) 4.099 ns (step:0) - (measurement period time:0.409960931 sec time_interval:409960931) - (invoke count:100000000 tsc_interval:1043830311)
 time_bench: Type:preempt_disable_enable Per elem: 2 cycles(tsc) 0.814 ns (step:0) - (measurement period time:0.081426870 sec time_interval:81426870) - (invoke count:100000000 tsc_interval:207325990)
 time_bench: Type:this_cpu_cmpxchg Per elem: 6 cycles(tsc) 2.376 ns (step:0) - (measurement period time:0.237617000 sec time_interval:237617000) - (invoke count:100000000 tsc_interval:605012261)
 time_bench: Type:cmpxchg Per elem: 6 cycles(tsc) 2.367 ns (step:0) - (measurement period time:0.118355540 sec time_interval:118355540) - (invoke count:50000000 tsc_interval:301352345)
 time_bench: Type:funcion_call_cost Per elem: 3 cycles(tsc) 1.357 ns (step:0) - (measurement period time:0.135766079 sec time_interval:135766079) - (invoke count:100000000 tsc_interval:345682156)
 time_bench: Type:func_ptr_call_cost Per elem: 15 cycles(tsc) 6.245 ns (step:0) - (measurement period time:0.624599867 sec time_interval:624599867) - (invoke count:100000000 tsc_interval:1590338176)
 time_bench: Type:page_alloc_put Per elem: 116 cycles(tsc) 45.904 ns (step:0) - (measurement period time:0.045904531 sec time_interval:45904531) - (invoke count:1000000 tsc_interval:116879122)
#+end_example

*** bench_traits_simple - with SRSO=IBPB

modprobe bench_traits_simple

Also collect traits data as this kernel is our traits devel kernel.

Traits compare table: *traits* AMD SRSO-default vs SRSO=IBPB:

| Test name          | Cycles |      |      | *Nanosec* |       |        |      % |
|                    |   SRSO | IBPB | diff |      SRSO |  IBPB |   diff | change |
|--------------------+--------+------+------+-----------+-------+--------+--------|
| function_call_cost |     14 |    3 |  -11 |     5.702 | 1.356 | -4.346 |  -76.2 |
| func_ptr_call      |     26 |   15 |  -11 |    10.335 | 6.243 | -4.092 |  -39.6 |
| trait_set          |     22 |    8 |  -14 |     8.979 | 3.258 | -5.721 |  -63.7 |
| trait_get          |     24 |    7 |  -17 |     9.791 | 2.985 | -6.806 |  -69.5 |
#+TBLFM: $4=$3-$2::$7=$6-$5::$8=(($7/$5)*100);%.1f

Raw data: bench_traits_simple
#+begin_example
 bench_traits_simple: Loaded
 time_bench: Type:for_loop Per elem: 0 cycles(tsc) 0.271 ns (step:0) - (measurement period time:0.027142183 sec time_interval:27142183) - (invoke count:100000000 tsc_interval:69108086)
 time_bench: Type:function_call_cost Per elem: 3 cycles(tsc) 1.356 ns (step:0) - (measurement period time:0.013565277 sec time_interval:13565277) - (invoke count:10000000 tsc_interval:34538399)
 time_bench: Type:func_ptr_call_cost Per elem: 15 cycles(tsc) 6.243 ns (step:0) - (measurement period time:0.062439886 sec time_interval:62439886) - (invoke count:10000000 tsc_interval:158981841)
 time_bench: Type:trait_set Per elem: 8 cycles(tsc) 3.258 ns (step:0) - (measurement period time:0.032585282 sec time_interval:32585282) - (invoke count:10000000 tsc_interval:82966647)
 time_bench: Type:trait_get Per elem: 7 cycles(tsc) 2.985 ns (step:0) - (measurement period time:0.029858881 sec time_interval:29858881) - (invoke count:10000000 tsc_interval:76025011)
#+end_example

* AMD testing patches

** Mitigation patch#1

Needed to adjust [[#mitigation-patch-attempt-1][Mitigation patch attempt #1]] as this kernel doesn't have the
rename of =page_pool_alloc_netmem= to =page_pool_alloc_netmems=.

Rename happened in commit:
 - 91a152cbb49c ("net: page_pool: rename page_pool_alloc_netmem to *_netmems")
 - git describe --contains 91a152cbb49c
 - v6.14-rc1~162^2~226^2~3


#+begin_src diff
diff --git a/net/core/page_pool.c b/net/core/page_pool.c
index f89cf93f6eb4..c48b4cdc24b6 100644
--- a/net/core/page_pool.c
+++ b/net/core/page_pool.c
@@ -571,10 +571,9 @@ static noinline netmem_ref __page_pool_alloc_pages_slow(struct page_pool *pool,
        return netmem;
 }
 
-/* For using page_pool replace: alloc_pages() API calls, but provide
- * synchronization guarantee for allocation side.
- */
-netmem_ref page_pool_alloc_netmem(struct page_pool *pool, gfp_t gfp)
+/* Allocation side fast-path */
+static __always_inline netmem_ref
+__page_pool_alloc_netmem(struct page_pool *pool, gfp_t gfp)
 {
        netmem_ref netmem;
 
@@ -590,11 +589,19 @@ netmem_ref page_pool_alloc_netmem(struct page_pool *pool, gfp_t gfp)
                netmem = __page_pool_alloc_pages_slow(pool, gfp);
        return netmem;
 }
+
+/* For using page_pool replace: alloc_pages() API calls, but provide
+ * synchronization guarantee for allocation side.
+ */
+netmem_ref page_pool_alloc_netmem(struct page_pool *pool, gfp_t gfp)
+{
+       return __page_pool_alloc_netmem(pool, gfp);
+}
 EXPORT_SYMBOL(page_pool_alloc_netmem);
 
 struct page *page_pool_alloc_pages(struct page_pool *pool, gfp_t gfp)
 {
-       return netmem_to_page(page_pool_alloc_netmem(pool, gfp));
+       return netmem_to_page(__page_pool_alloc_netmem(pool, gfp));
 }
 EXPORT_SYMBOL(page_pool_alloc_pages);
 ALLOW_ERROR_INJECTION(page_pool_alloc_pages, NULL);
#+end_src
