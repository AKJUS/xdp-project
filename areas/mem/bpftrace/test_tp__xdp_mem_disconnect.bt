#!/usr/local/bin/bpftrace
#include <linux/types.h>
//#include <sys/types.h>

struct xdp_mem_info {
	u32 type; /* enum xdp_mem_type, but known size type */
	u32 id;
};

struct xdp_mem_allocator {
	struct xdp_mem_info mem;
	union {
		void *allocator;
		struct page_pool *page_pool;
		struct zero_copy_allocator *zc_alloc;
	};
	int disconnect_cnt;
	unsigned long defer_start;
	//struct rhash_head node;
	//struct rcu_head rcu;
	//struct delayed_work defer_wq;
	//unsigned long defer_warn;
};

tracepoint:xdp:mem_disconnect {
	$xa = (struct xdp_mem_allocator *)args->xa;
	$cntA = args->disconnect_cnt;
	//$cntB = $xa->disconnect_cnt;

	/* Extract mem.id in two different ways */
	$idA = args->mem_id;
	$idB = $xa->mem.id;

	if ($cntA > 1) {
		printf("%s: mem.id=%d re-scheduled", probe, $idA);
	}

//	if (args->force == 1) {
//		printf("%s: mem.id=%d FORCE shutdown", probe, $idA);
//	}

	$page_pool = args->allocator;
	// $page_pool = $xa->allocator;
	@memid_to_page_pool[$idA] = $page_pool;

	time();
	printf("%s: mem.id-A:%d B:%d 0x%lX\n",
	       probe, $idA, $idB, $page_pool);
}
