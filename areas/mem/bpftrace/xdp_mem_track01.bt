#!/usr/local/bin/bpftrace
/*
 * xdp_mem_track01 - Catch when XDP mem_model unreg see inflight packets/pages
 *
 * Since kernel v5.5 the page_pool is responsible for its own delayed
 *  destruction instead of relying on XDP, see commit
 *  c3f812cea0d7 ("page_pool: do not release pool until inflight == 0.")
 *
 * Thus,
 * NIC driver developers converting their driver to use page_pool, should
 * use other scripts to verify, they don't leak pages.
 */

BEGIN {
	printf("Tracking XDP memory allocator connect+disconnect\n");
	@types[0] = "PAGE_SHARED";
	@types[1] = "PAGE_ORDER0";
	@types[2] = "PAGE_POOL";
	@types[3] = "ZERO_COPY";
}

tracepoint:xdp:mem_connect {
	$id        = args->mem_id;
	$page_pool = args->allocator;
	$type      = args->mem_type;
	$type_str  = @types[$type];

	time();
	printf("%s: type:%s mem.id:%d 0x%lX\n",
	       probe, $type_str, $id, $page_pool);

	@active_mem_ids[$id] = nsecs;
}

tracepoint:xdp:mem_disconnect {
	$id        = args->mem_id;
	$page_pool = args->allocator;
	$type      = args->mem_type;
	$type_str  = @types[$type];

	time(); /* Used as event marker */

	$time_ms = 0;
	if (@active_mem_ids[$id]) {
		$time_ms = (nsecs - @active_mem_ids[$id]) / 1000000;
	}
	delete(@active_mem_ids[$id]);

	if ($time_ms == 0) {
		/* No time means xdp:mem_connect didn't see connect */
		printf("%s: type:%s mem.id:%d 0x%lX (didn't see xdp:mem_connect)\n",
		       probe, $type_str, $id,  $page_pool);
	} else {
		printf("%s: type:%s mem.id:%d 0x%lX (lived %d ms)\n",
		       probe, $type_str, $id,  $page_pool, $time_ms);
	}
}

END {
	/* Default bpftrace will print all remaining maps at END */
	clear(@types); /* Avoid printing @types table */
}
