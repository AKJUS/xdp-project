# -*- fill-column: 76; -*-
#+Title: BTF (Bpf Type Format) notes
#+OPTIONS: ^:nil

The BPF Type Format (BTF) is a really cool feature that allows us to
describe data types used in e.g. BPF-maps (both key and value).

The [[https://www.kernel.org/doc/html/latest/bpf/btf.html#bpf-type-format-btf][kernel BTF documentation]] is all about encoding details, and not about
how to use BTF.

This is my notes for trying to understand how to use BTF
*from within the kernel*.

* Motivation

Specifically I want to figure out, if we can use BTF to allow for
dynamically extending and changing e.g. the map value type, and still have
the kernel validate the contents.

** Use-case: devmap and cpumap

The practical use-case is extending =devmap= and =cpumap= with a BPF-prog
that is run when an =xdp_frame= is redirected to a entry in the map.

David Ahern have [[https://lore.kernel.org/netdev/20200522010526.14649-1-dsahern@kernel.org/][posted RFC]] on extending =devmap=.

* Investigate other code

The ="bpf_spin_lock"= changes does a lot of checks based on BTF.

TODO: Investigate their approach.

** bpf_spin_lock approach

Main introducing commit:
- [[https://git.kernel.org/torvalds/c/d83525ca62cf][d83525ca62cf]] ("bpf: introduce bpf_spin_lock")

The ="bpf_spin_lock"= approach is significantly more advanced than we
actually need. So, need to figure out what parts we want to leverage.

*** Dynamic offset

A data-type =struct bpf_spin_lock anyname= can be located at any (aligned)
offset in the map value.

See code function =btf_find_spin_lock()= in kernel/bpf/btf.c
 - [[https://elixir.bootlin.com/linux/v5.6.14/ident/btf_find_spin_lock][Search btf_find_spin_lock]]
 - Code: [[https://elixir.bootlin.com/linux/v5.6.14/source/kernel/bpf/btf.c#L2327][btf_find_spin_lock()]]

I think it will be overkill for our use-case, to allow dynamic offset.

