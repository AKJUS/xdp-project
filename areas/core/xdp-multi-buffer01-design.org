# -*- fill-column: 76; -*-
#+Title: XDP multi buffer design

This document is a serious attempt to find a way to support multi-buffer
packets with XDP. With the important criteria of not hurting performance of
the single-buffer per packet design.

Keywords: xdp vs. jumbo-frame, TSO/LRO, packet header split

* Why XDP don't have multi-buffer support

XDP is designed for maximum performance, which is why certain driver-level
use-cases were not supported, like multi-buffer packets (like jumbo-frames).
As it e.g. complicated the driver RX-loop and memory model handling.

The single buffer per packet design, is also tied into eBPF Direct-Access
(DA) to packet data, which can only be allowed if the packet memory is in
contiguous memory.  This DA feature is essential for XDP performance.

* Use-cases for multi-buffer

What are the use-cases for multi-buffer packets:
- Jumbo-frames
- Packet header split
- TSO/LRO

* Proposal#1: XDP only access first-buffer

The eBPF Direct-Access (DA) feature is essential for performance. Thus, we
don't want to add an abstraction layer, that transparently gives XDP
BPF-prog access to payload across multiple buffers.

One way forward is to define that XDP only get access to the first packet
buffer, and it cannot see subsequent buffers.

We likely need to extend xdp_buff or xdp_md (the XDP bpf context) with some
indication that this is a multi-buffer packets, as this is needed by
internal helpers (see later) and might be useful for XDP-developer (e.g.
return XDP_PASS for these kind of frames).

* XDP multi-buffer extensions and complications

How and what do we need to extend the XDP data structured with to handle
multi-buffer packets?

** XDP tail adjust

The BPF XDP helper named: =bpf_xdp_adjust_tail= change length of the packet.
Currently it can only shrink the packet (but we need to extended it to allow
extending the tail, as e.g IPSEC and DNS-cache needs this).

With multi-buffer XDP packets (and proposal#1) then this adjust tail helper
becomes problematic.

Wouldn't it be easier to disallow a BPF-prog with this helper, when
driver have configured multi-buffer?  Or will it be too restrictive,
if jumbo-frame is very uncommon and only enabled because switch infra
could not be changed.

Perhaps it is better to let bpf_xdp_adjust_tail() fail runtime?

*** Use-cases for adjust tail

Use-cases that need to adjust tail of packet:

- ICMP replies directly from XDP[1] need to shorten packet tail, but
  this use-case doesn't use fragments.

- IPsec need to add/extend packet tail for IPset-trailer[2], again
  unlikely that this needs fragments(?). (This use-case convinced me
  that we need to add extend-tail support to bpf_xdp_adjust_tail)

- DNS or memcached replies directly from XDP, need to extend packet
  tail, to have room for reply. (It would be interesting to allow larger
  replies, but I'm not sure we should ever support that).

** XDP access to full packet length?

We likely need to provide the full packet length to XDP core and also
XDP-developer. The use-case for XDP-developers is validating the length of
the packet against what packet headers claim.

But if we need to know the full length, when the first-buffer is processed.
Then realize that this affect the drivers RX-loop, because then we need to
"collect" all the buffers before we can know the length (although some HW
provide this in first descriptor).

We likely have to change drivers RX-loop anyhow, as XDP_TX and XDP_REDIRECT
will also need to "collect" all buffers before the packet can be forwarded.
(Although this could potentially happen later in driver loop when it
meet/find the End-Of-Packet descriptor bit).


