# -*- fill-column: 76; -*-
#+Title: XDP multi buffer design

This document is a serious attempt to find a way to support multi-buffer
packets with XDP. With the important criteria of not hurting performance of
the single-buffer per packet design.

Keywords: xdp vs. jumbo-frame, TSO/LRO, packet header split

* Why XDP don't have multi-buffer support

XDP is designed for maximum performance, which is why certain driver-level
use-cases were not supported, like multi-buffer packets (like jumbo-frames).
As it e.g. complicated the driver RX-loop and memory model handling.

The single buffer per packet design, is also tied into eBPF Direct-Access
(DA) to packet data, which can only be allowed if the packet memory is in
contiguous memory.  This DA feature is essential for XDP performance.

* Use-cases for multi-buffer

What are the use-cases for multi-buffer packets:
- Jumbo-frames
- Packet header split
- TSO/LRO

* Proposal#1: XDP only access first-buffer

The eBPF Direct-Access (DA) feature is essential for performance. Thus, we
don't want to add an abstraction layer, that transparently gives XDP
BPF-prog access to payload across multiple buffers.

One way forward is to define that XDP only get access to the first packet
buffer, and it cannot see subsequent buffers.

We likely need to extend xdp_buff or xdp_md (the XDP bpf context) with some
indication that this is a multi-buffer packets, as this is needed by
internal helpers (see later) and might be useful for XDP-developer (e.g.
return XDP_PASS for these kind of frames).


