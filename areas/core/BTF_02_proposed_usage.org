# -*- fill-column: 76; -*-
#+Title: BTF (Bpf Type Format) proposal for dynamic map-values
#+OPTIONS: ^:nil



* Patches attempt-1: Rejected

bpf: dynamic map-value config layout via BTF

This patchset is based on top of David Ahern's work V3: "bpf: Add support
for XDP programs in DEVMAP entries"[1]. The purpose is to address the kABI
interfaces that is introduced in that patchset, before it is released.

[1] https://lore.kernel.org/netdev/20200529052057.69378-1-dsahern@kernel.org

The map-value of these special maps are evolving into configuration
interface between userspace and kernel. The approach in[1] is to expose a
binary struct layout that can only be grown in the end of the struct.

With the BTF technology it is possible to create an interface that is much
more dynamic and flexible.

** stgit

#+begin_example
stg mail --version="bpf-next RFC" --cc meup --edit-cover \
  --to ahern --to bpf --to netdev --cc daniel --cc alexei --cc andrii \
  move_struct..samples-bpf
#+end_example

** PATCH: bpf: move struct bpf_devmap_val out of UAPI

The struct bpf_devmap_val doesn't belong in uapi/linux/bpf.h, because this
is a struct that BPF-progs can define themselves, and can provide different
sizes to the kernel.

While moving the struct change the union to be a named union, with the name
"bpf_prog". This makes it easier to identify with BTF in next patch.


** PATCH bpf: devmap dynamic map-value storage area based on BTF

The devmap map-value can be read from BPF-prog side, and could be used for a
storage area per device. This could e.g. contain info on headers that need
to be added when packet egress this device.

This patchset adds a 'storage' member to struct bpf_devmap_val. More
importantly the struct bpf_devmap_val is made dynamic via leveraging and
requiring BTF for struct sizes above 4. The only mandatory struct member is
'ifindex' with a fixed offset of zero.

* Working on attempt-2

** Argue why not a uapi header

Adding struct bpf_devmap_val to UAPI header file is problematic, because a
userspace program that uses this header file will start to fail inserting
into map when compiled with the newer struct. Why, because previously it
didn't use the bpf_prog feature (and don't want to), but because bpf_prog.fd
needs to be -1 (to not use the feature) the map-insert now fails.

** Argue in patch description

This allows userspace to skip handling of 'bpf_prog' on map-inserts. The
bpf_prog.fd feature needs a file-descriptor (pointing to a bpf_prog) as
input. In-order to not use the feature userspace programs must handle this
by inserting minus-1 as the file-descriptor number.

Allow skip using this feature, via not including the member 'bpf_prog' in
the map-value struct, which is propagated/described via BTF.

** Details on ifindex zero

Found an annoying detail. In the original commit that introduced devmap
546ac1ffb70d ("bpf: add devmap, a map for storing net device references")
(Author: John Fastabend), inserting ifindex==0 will result in =xchg= with a
=NULL= pointer, which is basically a delete operation. The map already have
a delete function call (=dev_map_delete_elem=). This property is not used by
devmap_hash type. IMHO is it a mistake, and should result in =-EINVAL=
instead of deleting.

** Issue with Aherns patch

This function is called from =net/core/dev.c= in =generic_xdp_install()= to
refuse usage of devmap's with "egress" xdp_prog for generic-XDP. This binary
struct extend-at-end system result in that ALL future extension for devmap
cannot be used by generic-XDP.

#+begin_src C
bool dev_map_can_have_prog(struct bpf_map *map)
{
	if ((map->map_type == BPF_MAP_TYPE_DEVMAP ||
	     map->map_type == BPF_MAP_TYPE_DEVMAP_HASH) &&
	    map->value_size != offsetofend(struct bpf_devmap_val, ifindex))
		return true;

	return false;
}
#+end_src

This can be fixed with the dynamic-BTF proposal. Fixing this is an excellent
argument why BTF validation is needed.

** Update selftests

Update selftests added in d39aec79e592 ("selftest: Add tests for XDP
programs in devmap entries") (Author: David Ahern).

#+begin_example
$ git whatchanged d39aec79e5923bf984df991ffe51d4a2b7a9e746
 tools/testing/selftests/bpf/prog_tests/xdp_devmap_attach.c
 tools/testing/selftests/bpf/progs/test_xdp_devmap_helpers.c
 tools/testing/selftests/bpf/progs/test_xdp_with_devmap_helpers.c
#+end_example

* Patchset: attempt-2

** PATCH: bpf: devmap dynamic map-value area based on BTF

#+begin_quote
bpf: devmap dynamic map-value area based on BTF

The recent commit fbee97feed9b ("bpf: Add support to attach bpf program to a
devmap entry"), introduced ability to attach (and run) a separate XDP
bpf_prog for each devmap entry. A bpf_prog is added via a file-descriptor,
thus not using the feature requires using value minus-1. The UAPI is
extended via tail-extending struct bpf_devmap_val and using map->value_size
to determine the feature set.

There is a specific problem with dev_map_can_have_prog() check, which is
called from net/core/dev.c in generic_xdp_install() to refuse usage of
devmap's from generic-XDP that support these bpf_prog's. The check is size
based. This means that all newer features will be blocked from being use by
generic-XDP.

This patch allows userspace to skip handling of 'bpf_prog' on map-inserts.
The feature can be skipped, via not including the member 'bpf_prog' in the
map-value struct, which is propagated/described via BTF.

Fixes: fbee97feed9b ("bpf: Add support to attach bpf program to a devmap entry")
Signed-off-by: Jesper Dangaard Brouer <brouer@redhat.com>
#+end_quote

Need this patch in, while there is still time before we have to support
size=8 forever.

Further more, BPF userspace programs using struct bpf_devmap_val will get
surprised when including it as the tail-extended member will have to be
initialised to minus-1.

#+begin_src sh
stg mail --version="bpf-next V1" --cc meup \
  --to ahern --to bpf --cc netdev --cc daniel --to alexei --cc andrii \
  --cc lore \
  bpf-devmap-dynamic-map-value
#+end_src


