#+Title: XDP-hints via kfuncs: Early testing

* Driver: igc

I implemented metadata XDP hints kfuncs in driver igc.
As this hardware support timestamping.

** Driver igc: list timestamp types

The tcpdump tool can be used for listing the NICs timestamp types:

#+begin_src sh
$ tcpdump -i igc1 --list-time-stamp-types
Time stamp types for igc1 (use option -j to set):
  host (Host)
  adapter_unsynced (Adapter, not synced with system time)
#+end_src

** Driver igc: Initial test#1 with igc

Selftest tool "xdp_hw_metadata" have HW timestamp enable features, but it
doesn't seem to work in igc hardware.

#+begin_example
sudo ./xdp_hw_metadata igc1
[...]
poll: 1 (0)
xsk_ring_cons__peek: 1
0xad6880: rx_desc[0]->addr=100000000008000 addr=8100 comp_addr=8000
rx_hash: 0
rx_timestamp:  0 (sec:0.0000)
0xad6880: complete idx=8 addr=8000
poll: 0 (0)
#+end_example

Using tcpdump to enable HW timestamp on NIC:
 - tcpdump -ni igc1 -j adapter_unsynced

Now we have timestamps:
#+begin_example
poll: 1 (0)
xsk_ring_cons__peek: 1
0xad6880: rx_desc[2]->addr=10000000000a000 addr=a100 comp_addr=a000
rx_hash: 0
rx_timestamp:  4521993656936783 (sec:4521993.6569)
XDP RX-time:   1675856767910401209 (sec:1675856767.9104) delta sec:1671334774.2535
AF_XDP time:   1675856767910497901 (sec:1675856767.9105) delta sec:0.0001 (96.692 usec)
0xad6880: complete idx=10 addr=a000
#+end_example

The rx_timestamp: 4521993656936783 (sec:4521993.6569) looks like
CLOCK_MONOTONIC, e.g. not at wall-clock timestamp.

** Driver igc: RX-hash broken for netstack

The driver contains code for RX-hash extract, but the net_device NETIF_F_RXHASH
feature bit isn't set. This also makes it impossible to enable manually via
ethtool.

#+begin_example
$ ethtool -k igc1 | grep hash
receive-hashing: off [fixed]
#+end_example

Since: 0507ef8a0372 ("igc: Add transmit and receive fastpath and interrupt handlers")
 - $ git describe --contains  0507ef8a0372
 - v4.20-rc1~27^2~40^2~5

Git commit history and fix commit message:

#+begin_quote
When function igc_rx_hash() was introduced in v4.20 via commit 0507ef8a0372
("igc: Add transmit and receive fastpath and interrupt handlers"), the
hardware wasn't configured to provide RSS hash, thus it made sense to not
enable net_device NETIF_F_RXHASH feature bit.

The NIC hardware was configured to enable RSS hash info in v5.2 via commit
2121c2712f82 ("igc: Add multiple receive queues control supporting"), but
forgot to set the NETIF_F_RXHASH feature bit.

The original implementation of igc_rx_hash() didn't extract the associated
pkt_hash_type, but statically set PKT_HASH_TYPE_L3. The largest portions of
this patch are about extracting the RSS Type from the hardware and mapping
this to enum pkt_hash_types. This were based on Foxville i225 software user
manual rev-1.3.1 and tested on Intel Ethernet Controller I225-LM (rev 03).

For UDP it's worth noting that RSS (type) hashing have been disabled both for
IPv4 and IPv6 (see IGC_MRQC_RSS_FIELD_IPV4_UDP + IGC_MRQC_RSS_FIELD_IPV6_UDP)
because hardware RSS doesn't handle fragmented pkts well when enabled (can
cause out-of-order). This result in PKT_HASH_TYPE_L3 for UDP packets, and
hash value doesn't include UDP port numbers. Not being PKT_HASH_TYPE_L4, have
the effect that netstack will do a software based hash calc calling into
flow_dissect, but only when code calls skb_get_hash(), which doesn't
necessary happen for local delivery.

Fixes: 2121c2712f82 ("igc: Add multiple receive queues control supporting")
#+end_quote

