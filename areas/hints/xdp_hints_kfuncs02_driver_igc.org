#+Title: XDP-hints via kfuncs: For driver igc

* Driver: igc

I implemented metadata XDP hints kfuncs in driver igc.
As this hardware supports timestamping.

** Driver igc: list timestamp types

The tcpdump tool can be used for listing the NICs timestamp types:

#+begin_src sh
$ tcpdump -i igc1 --list-time-stamp-types
Time stamp types for igc1 (use option -j to set):
  host (Host)
  adapter_unsynced (Adapter, not synced with system time)
#+end_src

** Driver igc: Initial test#1 with igc

Selftest tool "xdp_hw_metadata" have HW timestamp enable features, but it
doesn't seem to work in igc hardware.

#+begin_example
sudo ./xdp_hw_metadata igc1
[...]
xsk_ring_cons__peek: 1
0x1c52958: rx_desc[0]->addr=100000000008000 addr=8100 comp_addr=8000
rx_hash: 0x00000000
rx_timestamp:  0 (sec:0.0000)
0x1c52958: complete idx=8 addr=8000
#+end_example

Using tcpdump to enable HW timestamp on NIC:
 - tcpdump -ni igc1 -j adapter_unsynced

Now we have timestamps:
#+begin_example
xsk_ring_cons__peek: 1
0x164c958: rx_desc[1]->addr=100000000009000 addr=9100 comp_addr=9000
rx_hash: 0x00000000
rx_timestamp:  1676296571376017676 (sec:1676296571.3760)
XDP RX-time:   1676296608373030219 (sec:1676296608.3730) delta sec:36.9970
AF_XDP time:   1676296608373128431 (sec:1676296608.3731) delta sec:0.0001 (98.212 usec)
0x164c958: complete idx=9 addr=9000
#+end_example

The HW "rx_timestamp" is clearly not in sync with system time. The XDP-RX and
AF_XDP time in about comes from =CLOCK_TAI= clock-id, which currently have an
offset of 37 seconds to wall-clock time. Given the delta is below 37 sec
(sec:36.9970) it seems XDP RX-time happened *before* the packet was received by
hardware, which obviously isn't possible (without a time machine).

** Driver igc: Clock-drift observations

The chip 225 clock seems to be loosing time, compared to the software system
time. If unloading the igc driver kernel module and reloading it, the NIC clock
is reset.

*UPDATE*: It is likely the CPU host system time that is drifting and not the NIC
time (based on talking with PTP/time expert Pasi Vaananen).

Output from shortly after loading igc driver:
#+begin_example
poll: 1 (0)
xsk_ring_cons__peek: 1
0x11fc958: rx_desc[7]->addr=10000000000f000 addr=f100 comp_addr=f000
rx_hash: 0x00000000
rx_timestamp:  1676297171760293047 (sec:1676297171.7603)
XDP RX-time:   1676297208760355863 (sec:1676297208.7604) delta sec:37.0001
AF_XDP time:   1676297208760416292 (sec:1676297208.7604) delta sec:0.0001 (60.429 usec)
0x11fc958: complete idx=15 addr=f000
#+end_example

Diff between HW and XDP timestamps:
 - 1676297171760293047-1676297208760355863 = -37000062816 nanosec
 - Minus 37 seconds: 62816 nanosec = 62.8 usec

Next output after 58 seconds:
#+begin_example
poll: 1 (0)
xsk_ring_cons__peek: 1
0xf31958: rx_desc[5]->addr=10000000000d000 addr=d100 comp_addr=d000
rx_hash: 0x00000000
rx_timestamp:  1676297229970688731 (sec:1676297229.9707)
XDP RX-time:   1676297266970731938 (sec:1676297266.9707) delta sec:37.0000
AF_XDP time:   1676297266970824714 (sec:1676297266.9708) delta sec:0.0001 (92.776 usec)
0xf31958: complete idx=13 addr=d000
#+end_example

After 58 seconds the diff between HW and XDP timestamps:
 - 1676297229970688731-1676297266970731938 = -37000043207
 - Minus 37 seconds: 43207 nanosec = 43.2 usec

Thus, HW clock seem to be loosing 19609 nanosec (62816-43207) over a period of
58 seconds. Thus, loosing 338 nanosec (0.338 usec) per sec.

Next sample after above with 273 sec:
#+begin_example
poll: 1 (0)
xsk_ring_cons__peek: 1
0xf31958: rx_desc[7]->addr=10000000000f000 addr=f100 comp_addr=f000
rx_hash: 0x00000000
rx_timestamp:  1676297502994406379 (sec:1676297502.9944)
XDP RX-time:   1676297539994351686 (sec:1676297539.9944) delta sec:36.9999
AF_XDP time:   1676297539994404062 (sec:1676297539.9944) delta sec:0.0001 (52.376 usec)
0xf31958: complete idx=15 addr=f000
#+end_example

After additional 273 seconds the diff between HW and XDP timestamps:
 - 1676297502994406379-1676297539994351686 = -36999945307
 - Minus 37 sec (37000000000 nanosec): -54693 nanosec

The hardware clock have now lost so much time that it runs behind SW time (when
taking 37 sec CLOCK_TAI offset into account).

Now clock have lost (43207+54693) 97900 nanosec (97.9 usec) over a period of 273
seconds, which is (97900/273) 358.6 nanosec per sec.

** Wakeup latency: From XDP to AF_XDP

Notice the fairly high latency between XDP to AF_XDP userspace processing:

#+begin_example
[...]
rx_hash: 0x3B0E5A29
rx_timestamp:  1678364132497613666 (sec:1678364132.4976)
XDP RX-time:   1678364168468618340 (sec:1678364168.4686) delta sec:35.9710
AF_XDP time:   1678364168468717588 (sec:1678364168.4687) delta sec:0.0001 (99.248 usec)
[...]
#+end_example

The approx 99 usec (microsec) difference between XDP vs AF_XDP userspace is the
userspace wakeup time. On this hardware it was caused by CPU idle sleep states,
which can be reduced by tuning /dev/cpu_dma_latency.

View current requested/allowed latency bound via:
#+begin_src sh
  hexdump --format '"%d\n"' /dev/cpu_dma_latency
#+end_src

Tuning =/dev/cpu_dma_latency= affect what sleep states the CPU is allowed to
enter. This is related to the latency values for each cpuidle/sleep state, which
can we viewed via files =/sys/devices/system/cpu/cpu0/cpuidle/*/latency= :

#+begin_example
$ grep -H . /sys/devices/system/cpu/cpu0/cpuidle/*/{latency,name}
/sys/devices/system/cpu/cpu0/cpuidle/state0/latency:0
/sys/devices/system/cpu/cpu0/cpuidle/state1/latency:2
/sys/devices/system/cpu/cpu0/cpuidle/state2/latency:10
/sys/devices/system/cpu/cpu0/cpuidle/state3/latency:40
/sys/devices/system/cpu/cpu0/cpuidle/state4/latency:133
/sys/devices/system/cpu/cpu0/cpuidle/state0/name:POLL
/sys/devices/system/cpu/cpu0/cpuidle/state1/name:C1
/sys/devices/system/cpu/cpu0/cpuidle/state2/name:C1E
/sys/devices/system/cpu/cpu0/cpuidle/state3/name:C3
/sys/devices/system/cpu/cpu0/cpuidle/state4/name:C6
#+end_example

Using tool "tuned" for tuning latency setting which include
setting =/dev/cpu_dma_latency= to 2 usec.

#+begin_example
$ sudo hexdump --format '"%d\n"' /dev/cpu_dma_latency
2
#+end_example

New results below:
#+begin_example
[...]
rx_hash: 0x3B0E5A29
rx_timestamp:  1678364191993816015 (sec:1678364191.9938)
XDP RX-time:   1678364227964693983 (sec:1678364227.9647) delta sec:35.9709
AF_XDP time:   1678364227964709004 (sec:1678364227.9647) delta sec:0.0000 (15.021 usec)
[...]
#+end_example

This caused the latency to be reduced to 15 usec (microsec) difference between
XDP to AF_XDP userspace processing. The overhead of CPU sleep state got removed,
but there are still some wakeup latency left. AF_XDP support a busy-polling mode
that should address this.

** Driver igc: RX-hash broken for netstack

The driver contains code for RX-hash extract, but the net_device NETIF_F_RXHASH
feature bit isn't set. This also makes it impossible to enable manually via
ethtool.

#+begin_example
$ ethtool -k igc1 | grep hash
receive-hashing: off [fixed]
#+end_example

Since: 0507ef8a0372 ("igc: Add transmit and receive fastpath and interrupt handlers")
 - $ git describe --contains  0507ef8a0372
 - v4.20-rc1~27^2~40^2~5

Git commit history and fix commit message:

#+begin_quote
When function igc_rx_hash() was introduced in v4.20 via commit 0507ef8a0372
("igc: Add transmit and receive fastpath and interrupt handlers"), the
hardware wasn't configured to provide RSS hash, thus it made sense to not
enable net_device NETIF_F_RXHASH feature bit.

The NIC hardware was configured to enable RSS hash info in v5.2 via commit
2121c2712f82 ("igc: Add multiple receive queues control supporting"), but
forgot to set the NETIF_F_RXHASH feature bit.

The original implementation of igc_rx_hash() didn't extract the associated
pkt_hash_type, but statically set PKT_HASH_TYPE_L3. The largest portions of
this patch are about extracting the RSS Type from the hardware and mapping
this to enum pkt_hash_types. This was based on Foxville i225 software user
manual rev-1.3.1 and tested on Intel Ethernet Controller I225-LM (rev 03).

For UDP it's worth noting that RSS (type) hashing have been disabled both for
IPv4 and IPv6 (see IGC_MRQC_RSS_FIELD_IPV4_UDP + IGC_MRQC_RSS_FIELD_IPV6_UDP)
because hardware RSS doesn't handle fragmented pkts well when enabled (can
cause out-of-order). This results in PKT_HASH_TYPE_L3 for UDP packets, and
hash value doesn't include UDP port numbers. Not being PKT_HASH_TYPE_L4, have
the effect that netstack will do a software based hash calc calling into
flow_dissect, but only when code calls skb_get_hash(), which doesn't
necessary happen for local delivery.

Fixes: 2121c2712f82 ("igc: Add multiple receive queues control supporting")
#+end_quote

** XDP hints hash value

The XDP-hints kfunc for RX-hash only returns the u32 hash value and not the
RSS-type associated with this hash.

This implementation for igc is straight forward

#+begin_quote
This implements XDP hints kfunc for RX-hash (xmo_rx_hash) straightforward
by returning the u32 hash value.

The associated RSS-type for the hash value isn't available to the BPF-prog
caller. This is problematic if BPF-prog tries to do L4 load-balancing with
the hardware hash, but the RSS hash type is L3 based.

For this driver this issue occurs for UDP packets, as driver (default
config) does L3 hashing for UDP packets (excludes UDP src/dest ports in
hash calc). Tested that the igc_rss_type_num for UDP is either
IGC_RSS_TYPE_HASH_IPV4 or IGC_RSS_TYPE_HASH_IPV6.
#+end_quote


