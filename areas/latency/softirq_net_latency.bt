#!/usr/bin/bpftrace
/* SPDX-License-Identifier: GPL-2.0+
 *
 * Catching high network IRQ-to-softirq latency by measuing time
 * between softirq "raise" until softirq function is called.  Limited
 * to network via softirq vector NET_RX_SOFTIRQ (3).
 *
 * This script was used for detecting latency issues described in blog:
 *  https://github.blog/2019-11-21-debugging-network-stalls-on-kubernetes/
 *
 * Output examples from this script can be seen in:
 *  https://bugzilla.redhat.com/show_bug.cgi?id=1795049#c8
 *
 * 26-Jan-2020	Jesper Dangaard Brouer	Created this
 */
BEGIN
{
	/* Cmdline arg#1: latency threshold input in usec */
	@threshold_usecs = $1 ? $1: 2000;
	/* Cmdline arg#2: enable measuring runtime of softirq func */
	@measure_runtime = $2;
	printf("Tracing softirq latency ... Hit Ctrl-C to end.\n");
	printf(" - Will report on latency above %d usecs (= %d ms)\n",
	       @threshold_usecs, @threshold_usecs / 1000);
	if (@measure_runtime) {
		printf(" - Also record runtime of softirq func call\n");
	}
	@threshold_ns = @threshold_usecs * 1000;
}

tracepoint:irq:softirq_raise
/args->vec == 3/   /* NET_RX_SOFTIRQ = 3 */
{
	if (!@start[cpu]) {
		/* Only catch first softirq_raise, to measure time
		 * until softirq_entry happens.  Other raise events
		 * could be triggered by other NICs.
		 */
		@start[cpu] = nsecs;
	}
}

tracepoint:irq:softirq_entry
/args->vec == 3/
{
	if (@start[cpu] > 0) {
		$lat = nsecs - @start[cpu];
		@latency_nanosec[cpu] = hist($lat);

		/* Report on "not-able-to-run" events over threshold */
		if ($lat >= @threshold_ns) {
			// @stack[cpu, $lat] = kstack; //no useful stack
			time("%H:%M:%S ");
			printf("High IRQ-to-softirq latency: %d usec (%d ms) on CPU:%d comm:%s\n",
			       $lat / 1000, $lat / 1000000, cpu, comm);
		}
	}
	delete(@start[cpu]);
	if (@measure_runtime) {
		@runtime[cpu] = nsecs;
	}
}

tracepoint:irq:softirq_exit
/args->vec == 3/
{
	if (@measure_runtime && @runtime[cpu] > 0) {
		$lat = nsecs - @runtime[cpu];
		@runtime_nanosec[cpu] = hist($lat);

		/* Report on "runtime" events over threshold */
		if ($lat >= @threshold_ns) {
			time("%H:%M:%S ");
			printf("Long softirq runtime: %d usec (%d ms) on CPU:%d comm:%s\n",
			       $lat / 1000, $lat / 1000000, cpu, comm);
		}

	}
	delete(@runtime[cpu]);
}

END
{	/* Default bpftrace will print all remaining maps at END */
	clear(@measure_runtime);
	clear(@threshold_usecs);
	clear(@threshold_ns);
}
