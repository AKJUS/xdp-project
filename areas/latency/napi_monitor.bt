#!/usr/bin/bpftrace
/* SPDX-License-Identifier: GPL-2.0+
 *
 * 31-Jan-2020	Jesper Dangaard Brouer	Created this
 */
BEGIN
{
	/* Cmdline arg#1: latency threshold input in usec */
	@threshold_usecs = $1 ? $1: 1000;
	printf("Tracing softirq latency ... Hit Ctrl-C to end.\n");
	printf(" - Will report on latency above %d usecs (= %d ms)\n",
	       @threshold_usecs, @threshold_usecs / 1000);
}

tracepoint:irq:softirq_raise
/args->vec == 3/   /* NET_RX_SOFTIRQ = 3 */
{
	@start_raise[cpu] = nsecs;
}

tracepoint:irq:softirq_entry
/args->vec == 3/
{
	if (@start_raise[cpu] > 0) {
		$lat = (nsecs - @start_raise[cpu]) / 1000; /* convert to usecs */
		@irq_latency_usecs = hist($lat);
	}
	delete(@start_raise[cpu]);
	@start_entry[cpu] = nsecs;
}

tracepoint:irq:softirq_exit
/args->vec == 3/
{
	if (@start_entry[cpu] > 0) {
		$lat = (nsecs - @start_entry[cpu]) / 1000; /* convert to usecs */
		@softirq_runtime_usecs = hist($lat);

		/* Report on events over threshold */
		if ($lat >= @threshold_usecs) {
			// @stack[cpu, $lat] = kstack; //no useful stack
			printf("High softirq runtime latency: %d usec (%d ms) on CPU:%d\n",
			       $lat, $lat / 1000, cpu);
		}
	}
	delete(@start_entry[cpu]);
}

tracepoint:napi:napi_poll
{
	@napi_bulk = lhist(args->work, 0, 64, 4);
}

END
{	/* Default bpftrace will print all remaining maps at END */
	clear(@threshold_usecs);
}
