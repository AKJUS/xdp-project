# -*- fill-column: 79; -*-
#+Title: Project management for areas/mem
#+OPTIONS: ^:nil

This document contains *org-mode tasks* and TODOs for files under: [[file:mem/][areas/mem/]].
It is recommended to use emacs when viewing and editing these =.org= files, as
the github rendering view removes the =TODO= and =DONE= marking on the tasks.


* TODO Implementing page_pool return-hook via SKB

The work is recorded in [[file:mem/page_pool02_SKB_return_callback.org]]

** DONE Post RFC-patchset for page_pool recycle with mvneta use-case
CLOSED: [2018-12-07 Fri]

Org-link to section:
[[file:mem/page_pool02_SKB_return_callback.org::*RFC-patchset]]

** DONE Prioritize page_pool options for skb_try_coalesce
CLOSED: [2019-01-29 Tue 17:33]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2019-01-29 Tue 17:33]
:END:

** TODO Doc code where netstack manipulate skb->head page

** TODO Add testing procedures actvating TCP coalesce code

* TODO page_pool handling in-flight frames during shutdown
See [[file:mem/page_pool03_shutdown_inflight.org]]

** DONE Test if __xdp_return() can hit no page_pool id issue
CLOSED: [2019-05-21 Tue 16:40]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2019-05-21 Tue 16:40]
:END:
Confirmed this can happen.

** DONE xdp_rxq_info_unreg_mem_model take over calling page_pool_destroy
CLOSED: [2019-05-21 Tue 19:45]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2019-05-21 Tue 19:45]
:END:

When delaying freeing the registered XDP memory model, then we cannot have
drivers calling page_pool_destroy() directly. Figure out a clean code way to do
this.

** TODO page_pool inflight: howto delay/postpone work in kernel

What is the best way to delay taking down page_pool object when driver calls
xdp_rxq_info_unreg_mem_model(), in the case page_pool detect/have in-flight
frames?

Should we create a workqueue?
#+begin_src C
#include <linux/workqueue.h>
static struct workqueue_struct *wq;
wq = alloc_workqueue("xdp_mem_dismantle_wq", 0, 0);
struct work_struct free_work;
INIT_WORK(&free_work, __unreg_mem_model_schedule);
queue_work(wq, &free_work);
#+end_src

** NEXT page_pool inflight: Code solution#3

** TODO Create tracepoints for page_pool

** TODO Create bpftrace scripts monitoring page_pool stats (via tracepoints)
