# -*- fill-column: 79; -*-
#+TITLE: Discussing /page_pool/ development directions
#+AUTHOR: Jesper Dangaard Brouer <hawk@kernel.org>
#+EMAIL: hawk@kernel.org
#+REVEAL_THEME: redhat
#+REVEAL_TRANS: linear
#+REVEAL_MARGIN: 0
#+REVEAL_EXTRA_JS: { src: '../reveal.js/js/redhat.js'}
#+REVEAL_ROOT: ../reveal.js
#+OPTIONS: reveal_center:nil reveal_control:t reveal_history:nil
#+OPTIONS: reveal_width:1600 reveal_height:900
#+OPTIONS: ^:nil tags:nil toc:nil num:nil ':t

* For conference: NetConf 2023                                     :noexport:

This presentation will be given at [[http://vger.kernel.org/netconf2023.html][Netconf 2023]].

* Brainstorm                                                       :noexport:

Summarise: how PP evolved

Change to struct page have pointer back to page_pool object
 - https://git.kernel.org/torvalds/c/c07aea3ef4d4 ("mm: add a signature in struct page")


Include files restructured
 - (find commit)


Page Pool evolving into netstack memory layer

Future development

Memory providers (by Jakub)
 - Making it possible replace "backend" e.g. page-allocator
 - e.g. allocate huge-page and split-up
   - to reduce IOTLB misses when using DMA IOMMU


* Slide: History                                                     :export:

Page Pool (PP) started out as: /Memory optimization/ for *XDP*
 - PP alloc cache for XDP_DROP use-case
 - And recycle XDP redirected frames (see =xdp_return_frame=)
 - PP pages could */not/* *be recycled via netstack* (/possible today/)
 - Optimized for *1-page per packet* (keeping page refcnt==1)

History
 - Developed and proposed at [[https://people.netfilter.org/hawk/presentations/MM-summit2016/generic_page_pool_mm_summit2016.pdf][MM-summit 2016]]
 - [[https://git.kernel.org/torvalds/c/684009d4fdaf40f][Merged]] with mlx5 NIC [[https://git.kernel.org/torvalds/c/60bbf7eeef10d][driver user]] in 2018

* Slide: Today                                                       :export:

Today: Page Pool have /full netstack/ *recycling* /support/
 - Uses [[https://git.kernel.org/torvalds/c/c07aea3ef4d4][fields in struct page]] for pool return path
 - Default /all SKBs/ using PP does *recycling* (=skb_mark_for_recycle()=)
 - Recently [[https://git.kernel.org/torvalds/c/535b9c61bdef][removed API]] for non-recycle option (=page_pool_release_page=)

* Slide: Recent PP developments                                      :export:
:PROPERTIES:
:reveal_extra_attr: class="mid-slide"
:END:

** Slide: Include files restructured

Notice: page_pool include files moved into
 - New directory: [[https://elixir.bootlin.com/linux/v6.6-rc2/source/include/net/page_pool][include/net/page_pool/]]
 - Split into /helpers.h/ and /types.h/

@@html:<br/><br/><small>@@
*Work done by*: /Yunsheng Lin/ and /Alexander "Olek" Lobakin/
 - Motivated by guidance from /Jakub Kicinski/
@@html:</small>@@

** Slide: Fragmenting pages - */pp_frag_count/*

Permit a driver to perform [[https://git.kernel.org/torvalds/c/52cc6ffc0ab2][fragmenting]] of the page *from within the driver*
 - Use-case split up by the driver after DMA
 - Uses field [[https://git.kernel.org/torvalds/c/4ef3960ea19c][pp_frag_count]] in struct page

#+begin_src C
  struct page *page = page_pool_alloc_pages();
  page_pool_fragment_page(page, DRIVER_PAGECNT_BIAS_MAX);
  rx_buf->page = page;
  rx_buf->pagecnt_bias = DRIVER_PAGECNT_BIAS_MAX;
  /* process a received buffer */
  rx_buf->pagecnt_bias--;
  /* fully consumed then flush the remaining */
  if (page_pool_defrag_page(page, rx_buf->pagecnt_bias))
    continue;
  page_pool_put_defragged_page(pool, page, -1, is_napi);
#+end_src

@@html:<br/><small>@@
*Work done by*: /Yunsheng Lin/ and /Alexander Duyck/
@@html:</small>@@

* Slide: Recent proposed changes upstream                            :export:
:PROPERTIES:
:reveal_extra_attr: class="mid-slide"
:END:

** Recent proposed: API to hide pp_frag_count

Extending PP with API to hide pp_frag_count handling
 - [ *PATCH* net-next v8 0/6] [[https://lore.kernel.org/all/20230912083126.65484-1-linyunsheng@huawei.com/#r][introduce page_pool_alloc() related API]]
   - By /Yunsheng Lin/ <linyunsheng@huawei.com>
  - API returns memory as (void) pointer to data
    - and values *size* and *offset* via pointers
  - Naming is weird as it no-longer deals with struct page

* Slide: Page Pool evolving into *netstack memory layer*?            :export:

* Slide: Thanks                                                      :export:

*/Thanks/* to recent Page Pool contributors
 - *Huawei*: /Yunsheng Lin/ + /Jie Wang/
 - *Meta*: /Jakub Kicinski/ + /Alexander Duyck/
 - *Intel*: /Alexander Lobakin/
 - *Red Hat*: /Lorenzo Bianconi/
 - *Fastly*: /Joe Damato/
 - *Linaro*: /Ilias Apalodimas/

* Emacs tricks                                                     :noexport:

# Local Variables:
# org-re-reveal-title-slide: "<h1 class=\"title\">%t</h1>
# <h2 class=\"author\">
# Jesper Dangaard Brouer<br/></h2>
# <h3>Netconf<br/>Paris, Sep 2023</h3>"
# org-export-filter-headline-functions: ((lambda (contents backend info) (replace-regexp-in-string "Slide: " "" contents)))
# End:
