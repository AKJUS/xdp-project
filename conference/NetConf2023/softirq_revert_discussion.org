# -*- fill-column: 79; -*-
#+TITLE: Discussing /Softirq/ revert and side-effects
#+AUTHOR: Jesper Dangaard Brouer <hawk@kernel.org>
#+EMAIL: hawk@kernel.org
#+REVEAL_THEME: redhat
#+REVEAL_TRANS: linear
#+REVEAL_MARGIN: 0
#+REVEAL_EXTRA_JS: { src: '../reveal.js/js/redhat.js'}
#+REVEAL_ROOT: ../reveal.js
#+OPTIONS: reveal_center:nil reveal_control:t reveal_history:nil
#+OPTIONS: reveal_width:1600 reveal_height:900
#+OPTIONS: ^:nil tags:nil toc:nil num:nil ':t


* For conference: NetConf 2023                                     :noexport:

This presentation will be given at [[http://vger.kernel.org/netconf2023.html][Netconf 2023]].

* Brainstorm

Eric Dumazet's 2016 change to softirq
 - Reverted by Paolo

Patch solved UDP overload case
 - that resulted in falling-of-edge when UDP-app and RX-NAPI share CPU

Over the years there have been several cases
 - that indicate this approach have caused issues
 - it is likely right choice to revert

The question is how to address UDP overload case in a new way
 - The solution could be to ask user to use other APIs
   - Tried multi UDP message recv (=recvmmsg=) but does NOT work
   - Tried UDP GRO but didn't manage to configure it correctly
   - io_uring could be an option (no time to test)

Show data on UDP overload case
 - Explain: Kernel is now again open to this DoS overload case

Hopefully get production data from Yan/Cloudflare

Perhaps: Slide explaining the problem of
 - RX-NAPI enqueuing 64-packets, each timeUDP-app dequeue 1-packet


* Emacs tricks                                                     :noexport:

# Local Variables:
# org-re-reveal-title-slide: "<h1 class=\"title\">%t</h1>
# <h2 class=\"author\">
# Jesper Dangaard Brouer<br/></h2>
# <h3>Netconf<br/>Paris, Sep 2023</h3>"
# org-export-filter-headline-functions: ((lambda (contents backend info) (replace-regexp-in-string "Slide: " "" contents)))
# End:
