# -*- fill-column: 79; -*-
#+TITLE: A practical introduction to XDP
#+AUTHOR: Jesper Dangaard Brouer
#+EMAIL: netoptimizer@brouer.com
#+REVEAL_THEME: redhat
#+REVEAL_TRANS: linear
#+REVEAL_MARGIN: 0
#+REVEAL_EXTRA_JS: { src: './reveal.js/js/custom.js'}
#+OPTIONS: reveal_center:nil reveal_control:t reveal_history:nil
#+OPTIONS: reveal_width:1600 reveal_height:900
#+OPTIONS: ^:nil tags:nil toc:nil num:nil ':t

* Intro to document                                                :noexport:

This presentation will be given at Linux Plumbers Conference 2018,
main track.

 https://linuxplumbersconf.org/event/2/contributions/71/

This emacs org-mode document contains notes and slides for the
presentation. The slides are in reveal.js format and are generated by
exporting this document via ox-reveal emacs package.

Below sections with :export: tags are slides in the presentation.

* Export/generate presentation                                     :noexport:

** Setup for org export to reveal.js
First, install the ox-reveal emacs package.

Package: ox-reveal git-repo and install instructions:
https://github.com/yjwen/org-reveal

After this, move to the 'Topics and slides' subtree and hit =C-c C-e C-s R R=
to export just the subtree; then open .html file to view slideshow. The
variables at document end ("Local Variables") will set up the title slide and
filter the "Slide:" prefix from headings; Emacs will ask for permission to load
them, as they will execute code.

* Homepage abstract for presentation                               :noexport:

Speakers:
 - Jesper Dangaard Brouer (Red Hat)
 - Mr. Andy Gospodarek (Broadcom)

** Description:

The eXpress Data Path (XDP) has been gradually integrated into the
Linux kernel over several releases. XDP offers fast and programmable
packet processing in kernel context. The operating system kernel
itself provides a safe execution environment for custom packet
processing applications, in form of eBPF programs, executed in device
driver context. XDP provides a fully integrated solution working in
concert with the kernel's networking stack. Applications are written
in higher level languages such as C and compiled via LLVM into eBPF
bytecode which the kernel statically analyses for safety, and JIT
translates into native instructions. This is an alternative approach,
compared to kernel bypass mechanisms (like DPDK and netmap).

This talk gives a practical focused introduction to XDP. Describing
and giving code examples for the programming environment provided to
the XDP developer. The programmer need to change their mindeset a bit,
when coding for this XDP/eBPF execution environment. XDP programs are
often split between eBPF-code running kernel side and userspace
control plane. The control plane API not predefined, and is up to the
programmer, through userspace manipulating shared eBPF maps.

* Below sections are presentation slides                           :noexport:

Section below with :export: tags are the slides.


* Slide: What will you learn?                                        :export:


* Emacs local variables                                            :noexport:

These emacs Local Variables does some export tricks.

# Local Variables:
# org-reveal-title-slide: "<h1 class=\"title\">%t</h1>
# <h2 class=\"author\">
# Jesper Dangaard Brouer (Red Hat)<br/>
# Andy Gospodarek (Broadcom)</h2>
# <h3>Linux Plumbers Conference (LPC)<br/>Vancouver, Nov 2018</h3>"
# org-export-filter-headline-functions: ((lambda (contents backend info) (replace-regexp-in-string "Slide: " "" contents)))
# End:
