# -*- fill-column: 79; -*-
#+TITLE: Resolving the XDP feature detection issue
#+AUTHOR: Jesper Dangaard Brouer and Toke Høiland-Jørgensen
#+EMAIL: brouer@redhat.com
#+REVEAL_THEME: redhat
#+REVEAL_TRANS: linear
#+REVEAL_MARGIN: 0
#+REVEAL_EXTRA_JS: { src: './reveal.js/js/custom-netconf.js'}
#+REVEAL_EXTRA_CSS: ./reveal.js/css/custom-adjust-logo.css
#+OPTIONS: reveal_center:nil reveal_control:t reveal_history:nil
#+OPTIONS: reveal_width:1600 reveal_height:900
#+OPTIONS: ^:nil tags:nil toc:nil num:nil ':t

* For conference: NetConf 2019

This presentation will be given at [[http://vger.kernel.org/netconf2019.html][Netconf 2019]].

* Export/generate presentation

This presentation is written in org-mode and exported to reveal.js HTML format.
The org-mode :export: tag determines what headlines/section are turned into
slides for the presentation.

** Setup for org-mode export to reveal.js
First, install the ox-reveal emacs package.

Package: ox-reveal git-repo and install instructions:
https://github.com/yjwen/org-reveal

** Export to HTML reveal.js

After installing ox-reveal emacs package, export to HTML reveal.js format via
keyboard shortcut: =C-c C-e R R=

The variables at document end ("Local Variables") will set up the title slide
and filter the "Slide:" prefix from headings; Emacs will ask for permission to
load them, as they will execute code.

** Export to PDF

The presentations can be converted to PDF format.  Usually the reveal.js when
run as a webserver under nodejs, have a printer option for exporting to PDF via
print to file, but we choose not run this builtin webserver.

Alternatively we found a tool called 'decktape', for exporting HTML pages to
PDF: https://github.com/astefanutti/decktape

The 'npm install' command:

 $ npm install decktape

After this the =decktape= command should be avail. If the npm install failed,
then it's possible to run the decktape.js file direct from the git-repo via the
=node= command:

#+begin_src bash
$ node ~/git/decktape/decktape.js \
    -s 1600x900 -p 100 --chrome-arg=--no-sandbox \
     xdp-feature-detection.html \
     xdp-feature-detection.pdf
#+end_src

The size is set to get slide text to fit on the page. And -p 100 makes it go
faster.


* Slides below                                                     :noexport:

Only sections with tag ":export:" will end-up in the presentation.

Colors are choosen via org-mode italic/bold high-lighting:
 - /italic/ = /green/
 - *bold*   = *yellow*
 - */italic-bold/* = red

* Slide: The XDP available features issue                            :export:

Users cannot know if a device driver support XDP or not
- This is the most often asked question
- And people will often use XDP-generic without noticing,
  - and complain about performance... this is a support issue.

Real /users/ requesting this:
- /Suricata config/ want to query for XDP-support, else fallback to BPF-TC
- /VM-migration/ want to query for XDP-support, else need to abort migration

Original argument: Drivers *MUST support all XDP-features*
  - Thus, there is not reason to expose feature bits
  - This was *never true*, and e.g. very few drivers support redirect

* Slide: What is the real issue?                                     :export:

Simply exposing feature XDP to userspace, doesn't solve the real issue
- Real issue: *too easy to misconfigure*
- How to get users to check features before attach (API didn't prev exist)

Kernel *allow* users to attach XDP bpf_prog
- that use *features that driver doesn't implement*
- cause */silent drops/* (debug via tracepoints)

We want something that can /reject earlier/
- at BPF-load or XDP-attach time

* Slide: Original plan (didn't work): Hide feature check             :export:

Wanted to /detect XDP features/ via analysing *return codes* used by program
- */Not possible/* due to map value (register) can be a return value
- Could still detect XDP_REDIRECT feature, as it needs a helper call

Wanted to /supply XDP features/ used, when *attaching* bpf_prog to a device
- */Not possible/* due to BPF *tail-call* maps (=BPF_MAP_TYPE_PROG_ARRAY=)
- E.g. after XDP prog is attached (and checked), new bpf_prog inserted into map
- E.g. on attach, need to traversing levels of tail-calls

One option left: Associate ifindex with bpf_prog *at load time* (like HW-offload)
- See /later slide/ for challenges and pitfalls...

* Slide: Internal kernel API                                         :export:

Should likely use net_device NDO (Network Device Operation) call =ndo_bpf=
- for query (or testing) supported XDP features
- (Think this was requested by Daniel Borkman)

* Slide: External userspace API                                      :export:

Add a userspace API to query features
- Netlink?
- Ethtool?

If BPF /load time/ check is possible
- This could be the userspace API, which is a probe-API
- Similar to 'bpftool feature' command that probe-loads BPF-progs

* Slide: One option left: BPF-load time ifindex binding              :export:

TODO: Expand on using HW-offload ifindex load-time binding
- Can this cover all the cases?

Our old nemesis: tail-call maps
- Case: ifindex bound XDP-prog use tail-call mapping
  - Issue: what stops adding a non-ifindex XDP-prog to a tail-call-map?

Pitfall: Generic-XDP
- At BPF load time, don't know is used for native or generic-XDP



* Emacs tricks

# Local Variables:
# org-reveal-title-slide: "<h1 class=\"title\">%t</h1>
# <h2 class=\"author\">Toke Høiland-Jørgensen (Red Hat)<br/>
# Jesper Dangaard Brouer (Red Hat)<br/></h2>
# <h3>Netconf<br/>Boston, June 2019</h3>"
# org-export-filter-headline-functions: ((lambda (contents backend info) (replace-regexp-in-string "Slide: " "" contents)))
# End:
