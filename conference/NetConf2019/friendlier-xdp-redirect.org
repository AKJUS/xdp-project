# -*- fill-column: 79; -*-
#+TITLE: Creating a friendlier UAPI for XDP_REDIRECT
#+AUTHOR: Toke Høiland-Jørgensen <toke@redhat.com>
#+EMAIL: toke@redhat.com
#+DATE: <2019-06-18 Tue>
#+REVEAL_THEME: redhat
#+REVEAL_TRANS: linear
#+REVEAL_MARGIN: 0
#+REVEAL_EXTRA_JS: { src: './reveal.js/js/redhat.js'}
#+OPTIONS: reveal_center:nil reveal_control:t reveal_history:nil
#+OPTIONS: reveal_width:1600 reveal_height:900
#+OPTIONS: ^:nil tags:nil toc:nil num:nil ':t timestamp:nil

* For conference: NetConf 2019

This presentation will be given at [[http://vger.kernel.org/netconf2019.html][Netconf 2019]].

* Export/generate presentation

This presentation is written in org-mode and exported to reveal.js HTML format.
The org-mode :export: tag determines what headlines/section are turned into
slides for the presentation.

** Setup for org-mode export to reveal.js
First, install the ox-reveal emacs package.

Package: ox-reveal git-repo and install instructions:
https://github.com/yjwen/org-reveal

** Export to HTML reveal.js

After installing ox-reveal emacs package, export to HTML reveal.js format via
keyboard shortcut: =C-c C-e R R=

The variables at document end ("Local Variables") will set up the title slide
and filter the "Slide:" prefix from headings; Emacs will ask for permission to
load them, as they will execute code.

** Export to PDF

The presentations can be converted to PDF format.  Usually the reveal.js when
run as a webserver under nodejs, have a printer option for exporting to PDF via
print to file, but we choose not run this builtin webserver.

Alternatively we found a tool called 'decktape', for exporting HTML pages to
PDF: https://github.com/astefanutti/decktape

The 'npm install' command:

 $ npm install decktape

After this the =decktape= command should be avail. If the npm install failed,
then it's possible to run the decktape.js file direct from the git-repo via the
=node= command:

#+begin_src bash
$ node ~/git/decktape/decktape.js \
    -s 1600x900 -p 100 --chrome-arg=--no-sandbox \
     xdp_building_block.html \
     xdp_building_block.pdf
#+end_src

The size is set to get slide text to fit on the page. And -p 100 makes it go
faster.


* Slides below                                                     :noexport:

Only sections with tag ":export:" will end-up in the presentation.

Colors are choosen via org-mode italic/bold high-lighting:
 - /italic/ = /green/
 - *bold*   = *yellow*
 - */italic-bold/* = red

* Slide: The XDP_REDIRECT UAPI is not very friendly                  :export:

- Two *different* helpers (=bpf_redirect()= and =bpf_redirect_map()=).
  - Using the _map variant doubles performance (why?! asks the user)
- /*Can't lookup*/ into redirect maps
  - So people use "shadow" maps of a different type
- The helper calls /always succeed/
  - But may just silently drop packets

** Slide: The XDP_REDIRECT UAPI is not very friendly (cont.)
- /*No way to know*/ if an interface supports REDIRECT
- Need to load a /dummy XDP/ program on TX iface (some drivers)
- No *QoS* or rate management, only small queue
  - Ever tried REDIRECT'ing from 100Gbit -> 10 Gbit?
- No *packet duplication* (i.e., no multicast / L2 broadcast)

** Slide: Why is this a problem?

- *Difficult* to get config right
  - Config failures lead to /*silent drops*/
- No way to /react dynamically/ to redirect failures
  - E.g., fall back to XDP_PASS

* Slide: What can we do about it? (short term)                       :export:

In progress:
- Allow /lookups into maps/ (3-line patch, thanks to =BPF_F_RDONLY_PROG=!)
- Return *error codes* from =bpf_redirect_map()= helper on lookup failure
- Use /hidden maps/ to improve performance of =bpf_redirect()=
  - Allows users to use the API (helper) that makes sense for use case
  - E.g., =bpf_redirect(bpf_fib_lookup())=
  - But /*is this really a good idea*/? See next slides...

* Slide: TX resource allocation                                      :export:

Can we ensure successful /lookup/ == successful *xmit*?

Two approaches:

1. /Allocate resources first/, then insert those into map
   - Separate (ethtool?) UAPI to allocate TX resources
   - Change devmap to accept a handle instead of ifindex
   - Separate API => potentially more flexible(?)

2. Trigger *resource allocation on map insert*
   - Call allocation =ndo= when iface inserted into devmap
   - Fail insert if allocation fails
   - Probably needs more descriptive map values(?) BTF?

** Slide: TX resource allocation: challenges

What are the barriers to achieve this?

- /*Don't know*/ on map insert if we're using /generic XDP/
  - Maybe use different map types?
- Supporting configs other than "1 TXQ/CPU"? Automatic locking?
- What about =bpf_redirect()= and XDP offload?

* Slide: Queueing                                                    :export:
- Expand *queueing capabilities* of XDP_REDIRECT
  - Select queueing scheme along with TX resource?
  - Probably not full qdisc, but at least /a few options/
  - Programmable, or just configurable?

* Slide: Multicast                                                   :export:
- Multicast through multi-send
  - Allow /calling redirect helper multiple times/?
  - Or new *redirect target* that selects multiple output "ports"?
  - Should program be allowed to modify packets in-between?
  - To copy or not to copy?

* Slide: Introducing an XDP TX hook                                  :export:

Can we add a /separate hook/ just before TX?

- Would know HW TX-ring occupancy
  - Can provide programmable *back pressure* to stack/redirect map
  - Maybe even redirect packets again if TX ring is full?
- Enables /programmable QoS/queueing/
- Symmetry with XDP RX hook (first/last thing that happens to pkt)
  - In particular, /*after regular stack*/ processing
  - Programmable packet verdict (AQMs)

* Emacs tricks

# Local Variables:
# org-reveal-title-slide: "<h1 class=\"title\">%t</h1>
# <h2 class=\"author\">%a<br/></h2>
# <h3>Netconf<br/>Boston, June 2019</h3>"
# org-export-filter-headline-functions: ((lambda (contents backend info) (replace-regexp-in-string "Slide: " "" contents)))
# End:
