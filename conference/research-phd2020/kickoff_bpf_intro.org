# -*- fill-column: 79; -*-
#+TITLE: BPF/XDP research PhD kickoff: Introduction to BPF/XDP
#+AUTHOR: Jesper Dangaard Brouer <brouer@redhat.com> and Toke Høiland-Jørgensen <toke@redhat.com>
#+EMAIL: brouer@redhat.com
#+REVEAL_THEME: redhat
#+REVEAL_TRANS: linear
#+REVEAL_MARGIN: 0
#+REVEAL_EXTRA_JS: { src: '../reveal.js/js/redhat.js'}
#+REVEAL_ROOT: ../reveal.js
#+OPTIONS: reveal_center:nil reveal_control:t reveal_history:nil
#+OPTIONS: reveal_width:1600 reveal_height:900
#+OPTIONS: ^:nil tags:nil toc:nil num:nil ':t

This is the slide deck for the PhD Kick-off meeting, 8th September 2020.

* Agenda content                                                   :noexport:

Anna's standard agenda:

1. Welcome and introductions

2. Short introductory presentation from each partner

3. Review of the project plan (overall goals, project structure, research
   tasks)

4. Planning of the first phase of the project (initial research tasks, upcoming
   deliverables, meeting structure)

Specific Content proposed in email thread:

1. Quick recap of the project description, and the background for why we (RH)
   are doing this.

2. "BPF in five minutes" - a quick recap of what this whole BPF subsystem in
   the kernel is and why it's relevant (for both projects, so also focusing on
   tracing). Just to get everyone on the same page, and start people thinking.

3. "Interesting future directions for XDP" - a grab bag of ideas and
   perspectives that we can discuss, and maybe even turn (some of them) into
   starting points for Frey and Simon depending on interest.

   My current list of subjects for this include (to be expanded on
   Tuesday, but in case you want to think about them ahead of time; I
   may also add a few more):

   - How do we define an architecture for a chain of programmable devices /
     device features to cooperate? I.e., how do we combine normal hardware
     offloads, offloaded BPF/P4, XDP, and the regular kernel stack into a
     coherent whole?

   - How can we realise (in practice) the potential for performance increases
     from dynamic bytecode elimination in BPF?

   - Using XDP and BPF in the cloud - there's an ongoing effort to get an
     upstream collaboration going around fixing some of the issues with this
     (see [0])

   - What kind of new performance monitoring tools can we build with BPF?

* Slide: Outline                                                     :export:
:PROPERTIES:
:reveal_extra_attr: class="mid-slide"
:END:

Background for Red Hat Research on XDP

BPF in five minutes

Interesting future directions for XDP

* Slide: Red Hat Research                                            :export:
:PROPERTIES:
:reveal_extra_attr: class="mid-slide"
:END:

Why is Red Hat sponsoring a research project?

** Slide: What is Red Hat Research                                  :export:

Established 2019: https://research.redhat.com

- Promoting open source in research
- Connecting Red Hatters with academia
- Promoting Red Hat and open source to students

** Slide: The Red Hat / KAU research project                        :export:

Project: "Building the next generation of programmable networking - powered by
Linux"

- Funded by Red Hat for three years
  - But hopefully we can continue the collaboration beyond that
- Focusing on /Linux/ and *XDP*
  - A way for us to think about longer-term issues
  - How does Linux fit into the world of programmable networking?

** Slide: How we work upstream                                      :export:

Red Hat is rolling out support for XDP in RHEL...

...but this project is about *upstream* development.

- Collaborating with other upstream people as well
- Everything is in the open ([[https://github.com/xdp-project][XDP-project github repository]] and mailing lists)

Important goal: Excellent research /and/ upstream code!

* Slide: Basic introduction and understanding of BPF                 :export:
:PROPERTIES:
:reveal_extra_attr: class="mid-slide"
:END:

/"BPF in five minutes"/

Basic introduction to
- BPF bytecode
- BPF concepts: hooks, context, maps and helpers
- Compiling restricted-C to BPF

** Slide: A new Operating System Model                              :export:

Modern Linux: becoming Microkernel-ish ([[http://www.brendangregg.com/blog/2019-12-02/bpf-a-new-type-of-software.html][from Brendan Gregg]])
[[file:images/bpf-os-model02.jpg]]

** Slide: BPF bytecode                                              :export:

The BPF bytecode is:
- /Generic Instruction Set/ Architecture (ISA) with C-calling convention
  * Read: the BPF assembly language
- Designed to *run in the Linux kernel*
  * It is */not a kernel module/*
  * It is a *sandbox* technology; BPF verfier ensures code safety
- /LLVM compiler/ has a BPF backend
  * Fortunately we */avoid writing BPF assembly/* by hand

** Slide: BPF concepts: context, maps and helpers

Each BPF program starts with a *pointer to a context* struct
- BPF bytecode has access to context (read/write limited)
  * function of context depends on program type

The BPF program itself is stateless
- /BPF maps/ can be used to create state
- Maps are basically /key = value/ construct
- Can be changed/read from both userspace and BPF-prog kernel-side

BPF helpers are used for
- calling kernel functions, to obtain info/state from kernel

** Slide: Kernel runtime and hooks                                  :export:

Kernel provides an /BPF runtime/ environment
- via BPF /maps/ and /helper calls/
- *Event based* hooks with type-specific /context/

The number of BPF hook points in the Linux kernel have exploded
- XDP and TC-BPF hooks likely *very relevant for this project*
- Many tracepoints, also /all kernel function calls/ via kprobe hooks
- TCP congestion control via BPF hooks
- cgroups, selinux, etc.

/*What new and exciting things can we build with this technology?*/

* Slide: Project ideas / discussion points                           :export:
:PROPERTIES:
:reveal_extra_attr: class="mid-slide"
:END:

** Slide: Architecture for programmable devices                     :export:

We have several layers of network processing on a server:

- NIC hardware offloads (checksum, protocol parsing, etc.)
- Offloaded XDP programs
- XDP program(s) on the host
- XDP program(s) inside a VM/container
- Other eBPF kernel hooks (TC, cgroup, socket, ...)
- Userspace applications

All of these are (or will be) programmable - how do they cooperate?

** Slide: Performance increases by omitting code                    :export:

The dynamic nature of eBPF means features can be added as-needed

- Ex: Don't need IPv4? Remove the parsing code completely

But *how do we realise this in practice*?

- Automatic conditional compilation?
- Removal of code at load-time by the verifier
- How to do this, and take advantage of existing kernel data structures?

** Slide: XDP and eBPF in the cloud                                 :export:

There are [[https://github.com/dsahern/bpf-progs/raw/master/docs/netdev-0x14-XDP-and-the-cloud.pdf][several issues]] with using XDP in a cloud environment:

- Hardware features not working with XDP
- VLAN header handling (or lack thereof)
- TX/RX hardware queue tuning and CPU affinity settings
- Poor support inside virtualised environment

Starting upstream project to deal with this - can this project contribute? How?

** Slide: Performance monitoring with eBPF                          :export:

With eBPF we can hook into lots of new places in the kernel

- What kind of performance monitoring tools can we build from that?
- What metrics that were not available before can we use?
- How do we turn those metrics into higher-level insights?
- Can we build solutions that will automatically fix problems?

* Emacs tricks

# Local Variables:
# org-re-reveal-title-slide: "<h1 class=\"title\">%t</h1><h2
# class=\"author\">Jesper Dangaard Brouer<br/>Toke Høiland-Jørgensen</h2>
# <h3>Karlstads University (Virtual event)<br/>8th September 2020</h3>"
# org-export-filter-headline-functions: ((lambda (contents backend info) (replace-regexp-in-string "Slide: " "" contents)))
# End:
