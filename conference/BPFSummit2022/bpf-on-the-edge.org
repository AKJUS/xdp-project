# -*- fill-column: 79; -*-
#+TITLE: The Promise of eBPF for the Edge
#+AUTHOR: Toke Høiland-Jørgensen <toke@redhat.com>
#+EMAIL: toke@redhat.com
#+REVEAL_THEME: redhat
#+REVEAL_TRANS: linear
#+REVEAL_MARGIN: 0
#+REVEAL_EXTRA_JS: { src: '../reveal.js/js/redhat.js'}
#+REVEAL_ROOT: ../reveal.js
#+OPTIONS: reveal_center:nil reveal_control:t reveal_history:nil
#+OPTIONS: reveal_width:1600 reveal_height:900
#+OPTIONS: ^:{} tags:nil toc:nil num:nil ':t

* For conference: eBPF summit 2022                                 :noexport:

This presentation will be given at the eBPF Summit 2022.

* Slides below                                                     :noexport:

Only sections with tag ":export:" will end-up in the presentation.

Colors are choosen via org-mode italic/bold high-lighting:
 - /italic/ = /green/
 - *bold*   = *yellow*
 - */italic-bold/* = red

* Why am I here?
:PROPERTIES:
:reveal_extra_attr: class="img-slide"
:END:

[[file:rh-heart-bpf.svg]]

* eBPF and Red Hat

We /support eBPF/ on RHEL:
- Full kernel feature backports (RHEL 8.7: kernel 5.14, RHEL 9.1: kernel 5.16)
- Support for eBPF kernel features, bcc-tools and bpftrace

#+HTML: <div style="font-size: 60%">
https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/9.0_release_notes/new-features#BZ-2070506
#+HTML: </div>


We *develop eBPF*:
- Upstream kernel contributions (networking, tracing, HID)
- Userspace libraries and tools ([[https://github.com/xdp-project/xdp-tools/tree/master/lib/libxdp][libxdp]], [[https://aya-rs.dev/][Aya]])
- Code examples and docs ([[https://github.com/xdp-project/xdp-tutorial][xdp-tutorial]], [[https://github.com/xdp-project/bpf-examples][bpf-examples]])

We are a /*platinum member of the eBPF foundation*/.

* Slide:

#+HTML: <div class="center-text" style="margin-top: 3em;">
#+HTML: <div class="big" style="margin-bottom: 2em;">

Please /*don't*/ rely on the *kernel version* number for detecting eBPF features!

#+HTML: </div>

Use /feature probing/ instead! See =bpftool feature= output
#+HTML: </div>


* What is the edge?
:PROPERTIES:
:reveal_extra_attr: class="img-slide"
:END:
#+HTML: <div style="font-size: 70%;">

#+CAPTION: From http://www.computerscijournal.org/vol12no2/an-edge-computing-tutorial/ - CC-BY-4.0
[[file:edge-figure.jpg]]
#+HTML: </div>

* What can eBPF bring to the edge?
:PROPERTIES:
:reveal_extra_attr: class="img-slide"
:END:

#+ATTR_html: :class figure-bg
[[file:bpf-venn.png]]

* eBPF for the edge
- /Networking/
  - Lower overhead container networking and NFV
  - Smaller CPUs: With XDP acceleration we can keep up
    - Accelerate firewall, load balancing, forwarding

- *Monitoring*
  - Low-overhead performance monitoring
  - Application resource usage reporting

- /*Security*/
  - Firewalling and DDoS protection
  - Application isolation
  - Custom security monitoring and enforcement

* eBPF hook co-existence
With more users, /co-existence/ becomes important!

- Assume other programs will access your hooks!
  - Not *every hook* supports this
  - In particular, use [[https://github.com/xdp-project/xdp-tools/][libxdp]] for XDP hook (/*mandatory*/ on RHEL)

- /More work needed/ on this:
  - Security model definition
  - Admin override tools

See [[https://lpc.events/event/16/contributions/1353/][Daniel Borkmann's talk at LPC]] for an example of how this can break!

* End
:PROPERTIES:
:reveal_extra_attr: class="img-slide"
:END:

#+HTML: <div class="center-text" style="font-size: 120%; margin-bottom: 3em;">
How will you leverage eBPF in *your* edge solution?
#+HTML: </div>

#+ATTR_html: :style height: 400px;
[[file:rh-heart-bpf.svg]]

* Emacs end-tricks                                                 :noexport:

This section contains some emacs tricks, that e.g. remove the "Slide:" prefix
in the compiled version.

# Local Variables:
# org-re-reveal-title-slide: "<h1 class=\"title\">%t</h1>
# <h2 class=\"author\">Toke Høiland-Jørgensen<br/><span style=\"font-size: 75%%\">Principal Kernel Engineer,
# Red Hat</span></h2>
# <h3>eBPF Summit</br>September 2022</h3>"
# org-export-filter-headline-functions: ((lambda (contents backend info) (let
# ((case-fold-search nil)) (replace-regexp-in-string "Slide: ?" "" contents))))
# End:
