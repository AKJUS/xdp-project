# -*- fill-column: 79; -*-
#+TITLE: XDP: the Distro View
#+AUTHOR: Jiri Benc, Jesper Dangaard Brouer and Toke Høiland-Jørgensen
#+EMAIL: jbenc@redhat.com
#+REVEAL_THEME: redhat
#+REVEAL_TRANS: linear
#+REVEAL_MARGIN: 0
#+REVEAL_EXTRA_JS: { src: '../reveal.js/js/redhat.js'}
#+REVEAL_ROOT: ../reveal.js
#+OPTIONS: reveal_center:nil reveal_control:t reveal_history:nil
#+OPTIONS: reveal_width:1600 reveal_height:900
#+OPTIONS: ^:nil tags:nil toc:nil num:nil ':t

This is currently notes for the LinuxPlumbersConf 2019 (LPC) presentation (see
title), and perhaps the slide deck (depending on Jiri Benc's preferences for
formatting tools).

https://www.linuxplumbersconf.org/event/4/contributions/460/

* Abstracts and presentation merge background

The LPC technical committee asked us (Jiri, Jesper and Toke) to merge our talks
into Jiri Benc's more generic XDP talk. Thus, the assignment in this doc it to
perform this merger.  Below is listed the abstracts from the three talks, such
that we can easier merge these.

** Main abstract: XDP the Distro View (Jiri)

Title: XDP: the Distro View
Author: Jiri Benc

It goes without saying that XDP is wanted more and more by everyone. Of course,
the Linux distributions want to bring to users what they want and need. Even
better if it can be delivered in a polished package with as few surprises as
possible: receiving bug reports stemming from users' misunderstanding and from
their wrong expectations does not make good experience neither for the users
nor for the distro developers.

XDP presents interesting challenges to distros: from the initial enablement
(what config options to choose) and security considerations, through user
supportability (packets "mysteriously" disappearing, tcpdump not seeing
everything), through future extension (what happens after XDP is embraced by
different tools, some of those being part of the distro, how that should
interact with users' XDP programs?), to more high level questions, such as user
perception ("how comes my super-important use case cannot be implemented using
XDP?").

Some of those challenges are long solved, some are in progress or have good
workarounds, some of them are yet unsolved. Some of those are solely the
distro's responsibility, some of them need to be addressed upstream. The talk
will present the challenges of enabling XDP in a distro. While it will also
mention the solved ones, its main focus are the problems currently unsolved or
in progress. We'll present some ideas and welcome discussion about possible
solutions using the current infrastructure and about future directions.

** Abstract#2: Improving the XDP User eXperience: via feature detection (Jesper)
Title: Improving the XDP User eXperience: via feature detection
Author: Jesper Dangaard Brouer

The most common asked question is: "Does my NIC support XDP", and our current
answer is read the source code. We really need to come up with a better answer.

The real issue is that users can attach an XDP bpf_prog to a drivers that use
features the driver doesn't implement, which cause silent drops. Or user
doesn't notice, that NIC loading fallback to generic-XDP, which is first
discovered when observing lower performance, or worse not all features are
supported with generic-XDP, resulting in unexpected packet drops.

BPF feature detection, recently added to bpftool, is based on probing the
BPF-core by loading BPF-programs using individual features (notice BPF load
time, not attaching it). Even if your BPF loader doesn't use feature probing,
it will notice if loaded on a incompatible kernel. As an BPF-prog using
something the kernel BPF-core doesn't support will get rejected at load-time,
before you attach the BPF-prog.

This doesn't work for XDP, as features vary on a per driver basis. Currently an
XDP BPF-prog isn't aware of that driver it will get used on, until driver
attach-time. Unfortunately, due to BPF tail-calls, we cannot use the driver
attach-time hook to check for compatibility (given new XDP BPF-progs can be
indirectly "attached" via tail-call map inserts).

In this talk, we will investigate the possibilities of doing XDP feature check
at BPF load-time, by assigning an ifindex to the BPF-prog. The ground work have
already been laid by XDP hardware offload, which already need ifindex at BPF
load-time (to perform BPF byte-code translation into NIC compatible code).

The open question are:
- Can the verifier detect/deduce XDP feature in use, for us?
- How does drivers express/expose XDP features?
- Are features more than XDP return codes, like meta-data support?
- How does this interact with generic-XDP?
- How to expose this to userspace? (to answer does NIC support XDP)
- How to handle tail-call map inserts?

** Abstract#3: Unified semantics for multiple XDP programs on a single interface (Toke)

Title: Unified semantics for multiple XDP programs on a single interface
Author: Toke Høiland-Jørgensen

XDP currently only supports loading a single program on each physical
interface. This is a limitation in cases where multiple functions need to run
on the same interface, for instance a packet filter followed by a forwarding
program. When all programs are written by the same person or group, this can be
solved by cooperative tail-calling between programs, and we have seen several
variations on this scheme already. However, this does not solve the case where
programs written by different people need to cooperate on the same interface,
e.g., if a system administrator wants to use two different third-party software
packages that both offer XDP support. As XDP support becomes more prevalent, we
expect this issue to become more urgent, and so we want to discuss what we can
do to solve this in the upstream community.

As part of this discussion we would like to collect the requirements people
have for chaining programs today. Can we agree on a common set of semantics
that will work for all the current and expected future use cases? Assuming we
can, is it then enough to define a common API for cooperative tail calling
(possibly supported by libbpf), or do we need kernel support to enforce
cooperation?

* Export/generate presentation

** Setup for org export to reveal.js
First, install the ox-reveal emacs package.

Package: ox-reveal git-repo and install instructions:
https://github.com/yjwen/org-reveal

To export hit =C-c C-e R R=, then open .html file to view slideshow.

The variables at document end ("Local Variables") will set up the title slide
and filter the "Slide:" prefix from headings; Emacs will ask for permission to
load them, as they will execute code.

** Export to PDF

The conference requires presentations to be delivered in PDF format.  Usually
the reveal.js when run as a webserver under nodejs, have a printer option for
exporting to PDF vai print to file, but we choose not run this builtin
webserver.

Alternatively I found a tool called 'decktape', for exporting HTML pages to
PDF: https://github.com/astefanutti/decktape

The 'npm install' failed on my system:

 $ npm install decktape

But (after running npm update) I can start the decktape.js file direct via
the 'node' command.

 $ node ~/git/decktape/decktape.js slides.html slides.pdf

This is the command needed on Arch - size is set to get slide text to fit on
the page. -p 100 makes it go faster.

$ decktape -s 1600x900 -p 100 --chrome-arg=--no-sandbox slides.html slides.pdf



* Colors in slides                                                 :noexport:
Text colors on slides are chosen via org-mode italic/bold high-lighting:
 - /italic/ = /green/
 - *bold*   = *yellow*
 - */italic-bold/* = red

* Notes - brainstorm

Unsolved issues:
- eBPF audit
- Safety of verifier
- Controls of eBPF capabilities (like updating maps for unpriv users)
- Multiple XDP programs + debugability
- Feature detection
- Managing expectations for XDP
  - Switching: Cloning
  - Ready-to-run XDP programs

BPF ELF-loaders
- reduce fragmentation, limit number of BPF-ELF-loaders
- libbpf: promote as distro (want others to follow)
- libbpf vs. iproute2
  - problematic iproute2 have incompatible ELF-maps format


* Slides below                                                     :noexport:

Only sections with tag ":export:" will end-up in the presentation. The prefix
"Slide:" is only syntax-sugar for the reader (and it removed before export by
emacs).

* Slide: Outline                                                     :export:
:PROPERTIES:
:reveal_extra_attr: class="mid-slide"
:END:

* Topic: BPF security and safety                                     :export:
:PROPERTIES:
:reveal_extra_attr: class="mid-slide"
:END:

** Slide: Current BPF "privileged" level unusable                  :export:

Current BPF only one "privileged" level, root (=CAP_SYS_ADMIN=)

RHEL as distro choose, BPF is "root-only" system-wide
- Our only option: Fully unpriv user = too high risk
- Actually /not what we really want/ - bad for overall system safety
- E.g. daemons *unnecessary run as root after loading BPF-prog*
  - expose (daemon) can crash/compromise entire system
  - common UNIX practise drop priv, cannot as still need to read maps

Need more flexible BPF "capabilities" levels
- [[https://lore.kernel.org/bpf/98fee747-795a-ff10-fa98-10ddb5afcc03@iogearbox.net/][Use-case]]: Android [[https://source.android.com/devices/tech/datausage/ebpf-traffic-monitor][ebpf-traffic-monitor]] read MAP stats (in unpriv process)
  - Currently forced to keep unprivileged BPF enabled
- Levels still motivate security guys to find holes

* Slide: Topic: Missing XDP feature detection                       :export:
:PROPERTIES:
:reveal_extra_attr: class="mid-slide"
:END:

#+BEGIN_NOTES
This is a compressed version of Jesper's slides
#+END_NOTES

XDP per *driver dependency* breaks BPF-feature "system"
- BPF-core is always compiled-in
- BPF verifier will /reject/ BPF_prog
  - if using a *feature that isn't available in BPF-core*

XDP challenge concept

** Slide: The XDP available features issue                          :export:

Today: Users cannot know if a device driver support XDP or not
- This is the most often asked question
- And people will often */use XDP-generic without noticing/*,
  - and complain about performance... this is a support issue.

Real /users/ requesting this:
- /Suricata config/ want to query for XDP-support, else fallback to BPF-TC
- /VM-migration/ want to query for XDP-support, else need to abort migration

Original argument: Drivers *MUST support all XDP-features*
  - Thus, there is not reason to expose feature bits
  - This was *never true*, and e.g. very few drivers support redirect

** Slide: What is the real issue?!?                                 :export:

Simply exposing feature XDP to userspace, doesn't solve the real issue
- Real issue: *too easy to misconfigure*
- How to get users to check features before attach? (unlikely to happen)

Real issue: Kernel *allows* users to attach XDP bpf_prog
- that use *features that driver doesn't implement*
- cause */silent drops/* (debug via tracepoints)

Solution: /Need something that can reject earlier/
- at /BPF-load/ *or* /XDP-attach/ *time*
- BPF verifier rejects at BPF-load time (don't see attach time)
  * (if using a feature that isn't available in BPF-core)

** Slide: Tech road-block: BPF tail-calls vs attach-time            :export:

Solution#1: Do /feature match/check at XDP driver/ *attach-time*
- Reject attach, if prog use unsupported features
- */Not possible due to BPF tail-call maps/*

Essentially tail-call maps adds attach "hook" outside driver control
1. Driver XDP prog tail-calls into prog map
2. Tail-prog calls into another (2nd level) prog map
3. Later 2nd level map is updated
   - with new program using unsupported feature
How can driver reject this 2nd level map insert?!?

** Slide: Solution#2: BPF-load time with ifindex (1/2)              :export:

Solution#2: Do /feature match/check at/ *BPF-load time*
- /Supply ifindex/ at *BPF load time* (like HW-offload already does!)

*/Issue-2A/*: /ifindex bound XDP-prog/ use */tail-call map/*
- How to check features of programs inserted into tail-call map?
- Solution-2A: *Bind tail-call map to ifindex*
  - And on tail-call map insert, BPF-prog must be ifindex bound too
  - Require: bound prog, must only use bound tail-map (same ifindex)
- Limitations: cannot share tail-call maps (any real users?)

- /Opt-in interface/ via supplying ifindex
  - Have to support not supply ifindex, due to backwards compatibility

** Slide: Solution#2: BPF-load time with ifindex (2/2)              :export:

*/Issue-2B/*: *Generic-XDP*
- At BPF load time, don't know if used for /native or generic/-XDP

Generic-XDP should support same feature set for all net_devices
- Still, some XDP features are not supported
  - e.g. cpumap redirect (silent drop)

Possible solutions
- Option(1) supply more info than ifindex?
  - Annoying for API perspective
- Option(2) let ifindex imply native-XDP?
  - Force generic-XDP to implement all XDP features (with some fallback)


* Slide: Next discussion: Expressing XDP features                    :export:
:PROPERTIES:
:reveal_extra_attr: class="mid-slide"
:END:

Next discussion:
- What XDP features need to be expressed?
- Can verifier detect these features?
  - if not, can users be trusted to supply features?

** Slide: Can verifier detect XDP features?                           :export:

Either need to /supply features/ (more input than =ifindex=)
- *Or* verifier needs to be able to /detect features/

Verifier *detection strategy*, to deduce XDP features in-use
- If XDP return code comes from register/map
  - then assume all XDP-return codes in use
- Except: can remove XDP_REDIRECT if redirect-helper isn't used
  - And assume remaining codes are in use

** Slide: What kind of XDP features to express?                     :export:

Obvious feature: XDP-return codes in use

Some /BPF-helpers/ can *depend on driver feature*
- /=bpf_xdp_adjust_meta()=/ depend on driver feature
  * Today fails runtime (we can do better!)
- /=bpf_xdp_adjust_tail()=/ relevant to know for multi-buffer support

Verifier can easily detect BPF-helpers in use

** Slide: How to expose XDP features to userspace?                  :export:

Highly prefer verifier detect features
- /Pros/: Avoids defining UAPI, thus easier to extend
- */Cons/*: Userspace cannot easily get XDP feature bits from NIC

Driver needs to express feature bits internally.
Two options:
- (1) Expose driver feature bits (ethtool? kind of UAPI)
- (2) Do feature probing like bpftool


* Slide: Random slides below                                         :export:
:PROPERTIES:
:reveal_extra_attr: class="mid-slide"
:END:

TODO: Cleanup/delete this section

** Slide: What is XDP?                                              :export:

#+BEGIN_NOTES
People should already know this; but since we already have the slide, might as
well include it.
#+END_NOTES

XDP basically: *New layer in the kernel network stack*
 - Before allocating the SKB
 - Driver level hook at DMA level

Means: Competing at the same “layer” as DPDK / netmap
 - Super fast, due to
   - Take action/decision earlier (e.g. skip some network layers)
   - No memory allocations

/Not kernel bypass/; data-plane is kept inside the kernel
 - Via eBPF: makes early network stack *run-time programmable*
 - Cooperates with the kernel stack

* Slide: Multiple XDP programs on a single interface                 :export:
:PROPERTIES:
:reveal_extra_attr: class="mid-slide"
:END:

** Supporting multiple programs on one interface
XDP currently only supports */one program per interface/*.

- So how to support /multiple functions/ in sequence?
- Driving factors:
  - Debugging: Enable XDP and still be able to handle the support calls
  - Composability: User-defined XDP programs combined with packaged ones
    - E.g.: Run custom filtering, then XDP-enabled Suricata

- Today, multiple programs only possible through *cooperative tail calls*
  - Implemented differently across projects

Let's look at a couple of examples of how this is done today...

** Prior art #1: Katran xdp_root

Facebook's [[https://github.com/facebookincubator/katran][Katran load balancer]] includes a mechanism for multi-program loading.

#+begin_src C
int xdp_root(struct xdp_md *ctx) { // installed on interface
  for (__u32 i = 0; i < ROOT_ARRAY_SIZE; i++) {
    bpf_tail_call(ctx, &root_array, i); // doesn't return when it succeeds
  }
  return XDP_PASS;
}
int xdp2(struct xdp_md *ctx) { // in root_array with idx=0
  for (__u32 i = 1; i < ROOT_ARRAY_SIZE; i++) { // start at 1!
    bpf_tail_call(ctx, &root_array, i);
  }
  return XDP_PASS;
}
#+end_src

/Pros/: Supports multiple programs with one map

/*Cons*/: Programs need to know their place in the sequence, no per-action hooks

** Prior art #2: Cloudflare xdpdump

Cloudflare has a [[https://github.com/cloudflare/xdpcap][xdpcap utility]] that can run after other XDP programs:

#+begin_src c
struct bpf_map_def xdpcap_hook =  {
	.type = BPF_MAP_TYPE_PROG_ARRAY,
	.key_size = sizeof(int),
	.value_size = sizeof(int),
	.max_entries = 5 }

int xdpcap_exit(struct xdp_md *ctx, void *hook_map, enum xdp_action action) {
    bpf_tail_call(ctx, hook_map, action);  // doesn't return if it succeeds
    return action;
}

int xdp_main(struct xdp_md *ctx) {  // program installed on interface
	return xdpcap_exit(ctx, &xdpcap_hook, XDP_PASS);
}
#+end_src

/Pros/: Different hook program per exit code

/*Cons*/: Programs must include helper, needs one map per chain call

** Limitations of current approaches

There are a couple of limitations we would like to overcome:

- Programs need to /include tail call code/
  - Needs cooperation from program authors
  - Incompatibility between approaches
  - Breaks if omitted by mistake
- Program order *cannot be changed* without recompilation
- Sysadmin cannot /*enforce policy*/
  - E.g., always run diagnostics program (such as xdpdump) first

** Chain calling: design goals

High-level goal: execute multiple eBPF programs in a single XDP hook.

With the following features:

1. /Arbitrary execution order/
  - Must be possible to change the order dynamically
  - Execution chain can depend on program return code
2. Should work *without modifying the programs* themselves

** Chain calling: Essential ideas

1. Per-interface data structure to define program sequence
   - Lookup /current program ID/ and *return code* and get next program
   - Can be implemented with BPF maps
   - Similar to *prior art #2*, but one map for whole call chain

2. Add a /hook at program return/:
     - Either by rewriting program return instructions
     - Or by hooking into =bpf_prog_run_xdp()= in the kernel

** Chain-calling: example execution flow
:PROPERTIES:
:reveal_extra_attr: class="img-slide"
:END:

#+ATTR_HTML: :class figure figure-bg
[[file:figures/XDP-chain-calls.svg]]

** Chain calling: Call sequence lookup helper

The chain call lookup /could be/ implemented like this:

#+begin_src c
struct chain_call_lookup {
    unsigned int prog_id;
    unsigned int return_code;
};

int bpf_chain_call(ctx, retcode) {
  void *map = get_chain_call_map(ctx.ifindex);
  if (map) {
     struct chain_call_lookup key = {
       .prog_id = ctx.prog_id,
       .return_code = retcode
     };
     bpf_tail_call(ctx, map, &key); // doesn't return if successful
  }
  return retcode;
}
#+end_src

** Chain calling: Call sequence lookup helper #2

The chain call lookup /could also be/ implemented like this:

#+begin_src c
int bpf_chain_call(ctx, retcode) {
  void *map = get_chain_call_map(ctx.ifindex);
  if (map) {
     void *inner_map = bpf_map_lookup(map, &ctx.prog_id);
     if (inner_map)
       bpf_tail_call(ctx, inner_map, &retcode); // doesn't return if successful
  }
  return retcode;
}
#+end_src


** Implement option #1: userspace only

To do this in userspace (e.g., libbpf), the loader must:

1. Define =bpf_chain_call()= as bpf func
2. Create+pin outer map per ifindex
3. Populate map as XDP programs are loaded (key by prog tag?)
4. Rewrite RETURN instructions to call =bpf_chain_call()= before loading prog

/Pros/: No kernel support needed

/*Cons*/: Only enforceable if all loaders comply, *lots* of book-keeping

** Implementation option #2: Kernel verifier

In the kernel verifier:

1. Define =bpf_chain_call()= as BPF helper
2. Verifier rewrites return instructions to helper calls
3. Userspace populates per-ifindex call sequence map

/Pros/: Enforceable systemwide, uses existing tail call infrastructure

/*Cons*/: More code in already complex verifier

** Implementation option #3: bpf_prog_run_xdp()

With kernel support in hook:

1. Make =bpf_chain_call()= a regular function
2. Call it before returning from =bpf_prog_run_xdp()=
3. Userspace populates per-ifindex call sequence map

/Pros/: Enforceable systemwide, no new verifier code

/*Cons*/: Multiple BPF invocations instead of tail calls, another check in fast path

* Notes

** Org-mode hints

https://orgmode.org/manual/Quoting-HTML-tags.html#Quoting-HTML-tags

** Colors from Red Hat guide lines

Red Hat Colors:

 - Red Hat Red #cc0000
 - Medium Red #a30000
 - Dark Red #820000

None of these red colors fit with baggrond color:
 - Using red 65% #ff4d4d
 - Found via: https://www.w3schools.com/colors/colors_picker.asp

Secondary Palette:

 - Dark Blue #004153
 - Medium Blue #4e9fdd
 - Light Blue #5bc6e8
 - Lighter Blue #a3dbe8

Accent Palette:

 - Purple #3b0083
 - Orange #ec7a08
 - Green #7ab800
 - Turquoise #007a87
 - Yellow #fecb00

# Local Variables:
# org-reveal-title-slide: "<h1 class=\"title\">%t</h1><h2
# class=\"author\">Jiri Benc<br/>Jesper Dangaard Brouer<br/>Toke Høiland-Jørgensen</h2>
# <h3>Red Hat inc<br/>Linux Plumbers Conf<br/>Sep 2019</h3>"
# org-export-filter-headline-functions: ((lambda (contents backend info) (replace-regexp-in-string "Slide: " "" contents)))
# End:
