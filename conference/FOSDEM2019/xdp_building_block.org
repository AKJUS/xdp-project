# -*- fill-column: 79; -*-
#+TITLE: XDP (eXpress Data Path) as a building block for other FOSS projects
#+AUTHOR: Jesper Dangaard Brouer and Magnus Karlsson
#+EMAIL: brouer@redhat.com
#+REVEAL_THEME: redhat
#+REVEAL_TRANS: linear
#+REVEAL_MARGIN: 0
#+REVEAL_EXTRA_JS: { src: './reveal.js/js/custom-fosdem2019.js'}
#+REVEAL_EXTRA_CSS: ./reveal.js/css/custom-adjust-logo.css
#+OPTIONS: reveal_center:nil reveal_control:t reveal_history:nil
#+OPTIONS: reveal_width:1600 reveal_height:900
#+OPTIONS: ^:nil tags:nil toc:nil num:nil ':t

* For conference: FOSDEM 2019

This presentation will be given at [[https://fosdem.org/2019/][FOSDEM 2019]].

Titled: [[https://fosdem.org/2019/schedule/event/xdp_overview_and_update/][XDP (eXpress Data Path) as a building block for other FOSS projects]]

More info in file:abstract.org

* Export/generate presentation

This presentation is written in org-mode and exported to reveal.js HTML format.
The org-mode :export: tag determines what headlines/section are turned into
slides for the presentation.

** Setup for org-mode export to reveal.js
First, install the ox-reveal emacs package.

Package: ox-reveal git-repo and install instructions:
https://github.com/yjwen/org-reveal

** Export to HTML reveal.js

After installing ox-reveal emacs package, export to HTML reveal.js format via
keyboard shortcut: =C-c C-e R R=

The variables at document end ("Local Variables") will set up the title slide
and filter the "Slide:" prefix from headings; Emacs will ask for permission to
load them, as they will execute code.

** Export to PDF

The presentations can be converted to PDF format.  Usually the reveal.js when
run as a webserver under nodejs, have a printer option for exporting to PDF via
print to file, but we choose not run this builtin webserver.

Alternatively we found a tool called 'decktape', for exporting HTML pages to
PDF: https://github.com/astefanutti/decktape

The 'npm install' command:

 $ npm install decktape

After this the =decktape= command should be avail. If the npm install failed,
then it's possible to run the decktape.js file direct from the git-repo via the
=node= command:

#+begin_src bash
$ node ~/git/decktape/decktape.js \
    -s 1600x900 -p 100 --chrome-arg=--no-sandbox \
     xdp_building_block.html \
     xdp_building_block.pdf
#+end_src

The size is set to get slide text to fit on the page. And -p 100 makes it go
faster.


* Slides below                                                     :noexport:

Only sections with tag ":export:" will end-up in the presentation.

Colors are choosen via org-mode italic/bold high-lighting:
 - /italic/ = /green/
 - *bold*   = *yellow*
 - */italic-bold/* = red

* Slide: Framing XDP                                                 :export:

XDP: new /in-kernel programmable/ (eBPF) *layer before netstack*
 - Similar speeds as DPDK
XDP ensure that *Linux networking stays relevant*
 - Operate at L2-L3, netstack operate L4-L7
XDP is not first mover, but believe XDP is /different and better/
 - /Killer feature/: Integration with Linux kernel
 - Flexible sharing of NIC resources


** Slide: What is XDP?                                              :export:

XDP (eXpress Data Path) is a Linux *in-kernel* fast-path
 - /New programmable layer in-front/ of traditional network stack
 - Already accepted part of upstream kernels (and RHEL8)
 - Operate at the same level and speeds as DPDK
 - For L2-L3 use-cases: seeing x10 performance improvements!
 - Can accelerate *in-kernel* L2-L3 use-cases (e.g. forwarding)

What is /AF_XDP/? (the Address Family XDP socket)
 - Hybrid *kernel-bypass* facility, move selective frames out of kernel
 - XDP/eBPF prog filter packets and REDIRECT into AF_XDP socket
 - Deliver raw L2 frames into userspace

** Slide: Why is XDP needed?                                        :export:

This is about *Kernel networking stack staying relevant*
 - For emerging use-cases and markets

Linux networking stack optimized for layers L4-L7
 - Missing something to address L2-L3 use-cases/markets

XDP operate at layers L2-L3


@@html:<br/><small>@@

If you forgot OSI model:
 - L2=Ethernet
 - L3=IPv4/IPv6
 - L4=TCP/UDP
 - L7=Applications

@@html:</small>@@

** Slide: Existing solutions: Not first mover                       :export:

XDP is not first mover in this area
 - But we believe /XDP is different and better/

Existing *kernel bypass* solutions:
 - netmap (FreeBSD), DPDK (Intel/LF), PF_ring (ntop)
 - maglev (Google), Onload (SolarFlare)

Commercial solutions /similar to XDP/:
 - ndiv by HAproxy, product [[https://www.haproxy.com/products/aloha-hardware-appliance/][ALOHA]]

** Slide: What makes XDP different and better?                      :export:

*Not bypass*, but /in-kernel fast-path/

The killer feature of XDP is integration with Linux kernel,
 - Leverage existing kernel infrastructure, eco-system and market position
 - Programmable flexibility via eBPF sandboxing (kernel infra)
 - Flexible sharing of NIC resources between Linux and XDP
 - Cooperation with netstack via eBPF-helpers and fallback-handling
 - No need to reinject packets, like bypass solutions

/AF_XDP/ for /flexible/ *kernel-bypass*
 - Cooperate with use-case needing fast raw frame access
 - While leveraging existing kernel NIC drivers

* Emacs tricks

# Local Variables:
# org-reveal-title-slide: "<h1 class=\"title\">%t</h1>
# <h2 class=\"author\">Jesper Dangaard Brouer (Red Hat)<br/>
# Magnus Karlsson (Intel)<br/></h2>
# <h3>FOSDEM 2019<br/>Brussels, Feb 2019</h3>"
# org-export-filter-headline-functions: ((lambda (contents backend info) (replace-regexp-in-string "Slide: " "" contents)))
# End:
