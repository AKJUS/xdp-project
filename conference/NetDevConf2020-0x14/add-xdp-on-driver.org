# -*- fill-column: 79; -*-
#+TITLE: Add XDP support on a NIC driver
#+AUTHOR: Lorenzo Bianconi, Jesper Dangaard Brouer, Ilias Apalodimas
#+EMAIL: lorenzo.bianconi@redhat.com, brouer@redhat.com, ilias.apalodimas@linaro.org
#+REVEAL_THEME: redhat
#+REVEAL_TRANS: linear
#+REVEAL_MARGIN: 0
#+REVEAL_EXTRA_JS: { src: '../reveal.js/js/redhat.js'}
#+REVEAL_ROOT: ../reveal.js
#+REVEAL_POSTAMBLE: <div id="extra-logos"><img src="../reveal.js/images/linaro-logo.png" class="linaro-logo" /></div>
#+OPTIONS: reveal_center:nil reveal_control:t reveal_history:nil
#+OPTIONS: reveal_width:1600 reveal_height:900
#+OPTIONS: ^:nil tags:nil toc:nil num:nil ':t

* For conference: NetDevConf 2020					 :noexport:

Workshop for NetDevConf 0x14
* Colors in slides                                                 :noexport:
Text colors on slides are chosen via org-mode italic/bold high-lighting:
 - /italic/ = /green/
 - *bold*   = *yellow*
 - */italic-bold/* = red

* Slides below                                                     :noexport:

Only sections with tag ":export:" will end-up in the presentation. The prefix
"Slide:" is only syntax-sugar for the reader (and it removed before export by
emacs).

* Slide: Driver XDP RX-processing (NAPI) loop                      :export:

Code needed in *driver* for /supporting XDP/ is fairly simple

#+begin_src C
while (desc_in_rx_ring && budget_left--) {
  action = bpf_prog_run_xdp(xdp_prog, xdp_buff);
  /* helper bpf_redirect_map have set map (and index) via this_cpu_ptr */
  switch (action) {
    case XDP_PASS:     break;
    case XDP_TX:       res = driver_local_xmit_xdp_ring(adapter, xdp_buff); break;
    case XDP_REDIRECT: res = xdp_do_redirect(netdev, xdp_buff, xdp_prog); break;
    default:           bpf_warn_invalid_xdp_action(action); /* fall-through */
    case XDP_ABORTED:  trace_xdp_exception(netdev, xdp_prog, action); /* fall-through */
    case XDP_DROP:     page_pool_recycle_direct(pp, page); res = DRV_XDP_CONSUMED; break;
  } /* left out acting on res */
} /* End of NAPI-poll */
xdp_do_flush_map(); /* Bulk chosen by map, can store xdf_frame for flushing */
driver_local_XDP_TX_flush();
#+end_src

Tricky part is *changing* driver */memory model/* to be compatible with XDP


* Slide: XDP requirements							   :export:
- XDP frame in physical contiguous memory
  - BPF Direct-Access for validating correctness
  - No paged frames support, data cannot be split across pages
  - Read and Write access to the DMA buffers
  - Disable jumbo frames (packet < PAGE_SIZE) loading a BPF program
- XDP headroom to push/pop header through bpf_xdp_adjust_head()
- Reserve tailroom for skb_shared_info and rely on build_skb() on XDP_PASS
- Cannot allocate page fragments to support it (e.g. through napi_alloc_skb())
- Rx buffers must be recycled to get high speed!
* Slide: The Allocator								   :export:

- Optimized for XDP mode. Ideally one page per frame model
  - Supports split-page model, but the recycling is usually in-driver
- Native buffer recycling for XDP
  - Two caches available, fast cache (can be used in-IRQ only) and a ptr-ring (slower) cache
  - XDP recycling usually runs in NAPI, no locking overhead
- API supports DMA mapping and syncing
* Slide: page_pool design principles					   :export:
:PROPERTIES:
:reveal_extra_attr: class="mid-slide"
:END:
Kernel documentation on Documentation/networking/page_pool.rst

- Need to create one pool for hardware queue
  - Otherwise we need locking, which beats the page_pool purpose
  - Some drivers will impose exceptions (i.e currently cpsw)
- Optimized for speed. Cache line accessing is carefully taken into
  consideration
- Plan to add recycling on it for normal SKB traffic

** Slide: The API

- page_pool_create(): Create the pool object
- page_pool_put_page(): Recycle or unmap the page
- page_pool_release_page(): Unmap the page
- page_pool_dev_alloc_pages(): Get a new page from cache or alloc a new one
- page_pool_get_dma_addr(): Retreive the stoired DMA address
- page_pool_get_dma_dir(): Retrieve the stored DMA direction
- page_pool_recycle_direct(): Recycle the page immediately (safe context only)
* Slide: Code examples pool creation					   :export:
#+begin_src C
    struct page_pool_params pp_params = { 0 };
    struct xdp_rxq_info xdp_rxq;
    int err;

    pp_params.order = 0;
    /* internal DMA mapping in page_pool */
    pp_params.flags = PP_FLAG_DMA_MAP;
    pp_params.pool_size = DESC_NUM;
    pp_params.nid = NUMA_NO_NODE;
    pp_params.dev = priv->dev;
    pp_params.dma_dir = xdp_prog ? DMA_BIDIRECTIONAL : DMA_FROM_DEVICE;
    page_pool = page_pool_create(&pp_params);

    err = xdp_rxq_info_reg(&xdp_rxq, ndev, 0);
    if (err)
        goto err_out;

    err = xdp_rxq_info_reg_mem_model(&xdp_rxq, MEM_TYPE_PAGE_POOL, page_pool);
    if (err)
        goto err_out;
#+end_src
** Slide: NAPI poolling
#+begin_src C
    /* NAPI Rx poller */

    enum dma_data_direction dma_dir;

    dma_dir = page_pool_get_dma_dir(dring->page_pool);
    while (done < budget) {
        if (some error)
            page_pool_recycle_direct(page_pool, page);
        if (packet_is_xdp) {
            if XDP_DROP:
                page_pool_recycle_direct(page_pool, page);
        } else (packet_is_skb) {
            page_pool_release_page(page_pool, page);
            new_page = page_pool_dev_alloc_pages(page_pool);
        }
    }
#+end_src

** Slide: Module unloading

#+begin_src C
    /* Driver unload */
    page_pool_put_page(page_pool, page, false);
    xdp_rxq_info_unreg(&xdp_rxq);
    page_pool_destroy(page_pool);
#+end_src
* Emacs end-tricks                                                 :noexport:

This section contains some emacs tricks, that e.g. remove the "Slide:" prefix
in the compiled version.

# Local Variables:
# org-re-reveal-title-slide: "<h1 class=\"title\">%t</h1><h2
# class=\"author\">Lorenzo Bianconi<br/>Jesper Dangaard Brouer<br/>Ilias Apalodimas</h2>
# <h3>NetDev 0x14<br/>Vancouver, March 2020</h3>"
# org-export-filter-headline-functions: ((lambda (contents backend info) (replace-regexp-in-string "Slide: " "" contents)))
# End:
