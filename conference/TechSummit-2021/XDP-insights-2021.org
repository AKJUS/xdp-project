# -*- fill-column: 79; -*-
#+TITLE: XDP and BPF insights
#+AUTHOR: Jesper Dangaard Brouer <hawk@kernel.org>
#+EMAIL: brouer@redhat.com
#+REVEAL_THEME: redhat
#+REVEAL_TRANS: linear
#+REVEAL_MARGIN: 0
#+REVEAL_EXTRA_JS: { src: '../reveal.js/js/redhat.js'}
#+REVEAL_ROOT: ../reveal.js
#+OPTIONS: reveal_center:nil reveal_control:t reveal_history:nil
#+OPTIONS: reveal_width:1600 reveal_height:900
#+OPTIONS: ^:nil tags:nil toc:nil num:nil ':t

* For conference: Tech Summit at Fastly                            :noexport:

Request from Fastly engineer Sanjay Rao (know from Netfilter workshop):
#+begin_quote
They asked me to find out if you could do a virtual talk at our upcoming
"Tech Summit", October 4-6
#+end_quote

Title: XDP and BPF insights
 - Programmable Runtime Extending Linux Kernel for Packet Processing

** Abstract:

This talk will give an insights into BPF and XDP (eXpress Data Path)
technologies.

These technologies are changing the traditional Operating System model.

The Linux Kernel is becoming programmable and runtime extendable,
without the risk of crashing the kernel. BPF is a sandbox technology
that provide an alternative to Kernel modules.

These technologies push the limits on what is possible for fast
programmable packet processing in the Operating System Kernel.

Talk will also cover future work and planned extensions to XDP.

* Colors in slides                                                 :noexport:

Text colors on slides are chosen via org-mode italic/bold high-lighting:
 - /italic/ = /green/
 - *bold*   = *yellow*
 - */italic-bold/* = red

* Brainstorm notes                                                 :noexport:

Make them aware of BPF/XDP communities
 - Mention: xdp-newbies@vger.kernel.org

BPF 7-years (and XDP 5 years)
 - Congrats, *but* evolution of BPF features
 - Evolved
 - Resulted in many out-dated Google search articles
 - Old outdated approaches are used as best-practices 

* Slide: Overview: What will you /learn/?                            :export:

/What is BPF/ *really* ?
 - How this technology fundamentally *changes existing OS-model*

Taming /BPF superpower/ - is *not easy*
 - BPF "user experience" - could be better!

/What is XDP/?
 - and what *pain points* have recently been /resolved/


* Slide: What is BPF ?                                               :export:

From: https://ebpf.io/what-is-ebpf
#+begin_quote
eBPF is a revolutionary technology that can run sandboxed programs in the Linux
kernel without changing kernel source code or loading a kernel module
#+end_quote

/BPF/ is a *technology name*: */no longer an acronym/*

*Rate of innovation* at the operating system level: */Traditionally slow/*
 - BPF enables things at OS-level that were not possible before
 - BPF will /radically increase/ rate of innovation

** Slide: *Traditional* Kernel development process                  :export:

[[file:images/bpf_comic01_scale.png]]

** Slide: *BPF* development process                                 :export:

[[file:images/bpf_comic02_scale.png]]

* Slide: What is BPF from OS-vendor perspective                      :export:

From an OS vendor (like Red Hat) perspective
- BPF is a  */fundamental change/* to a 50-year old *kernel model*
  - New interface for applications to make kernel requests, alongside syscalls
- BPF is "/kernel-mode applications/"
- See it as /safer/ alternative to *kernel modules*
  - Better way to extend the kernel dynamically
  - Kernel developers: Do lose some control
  - ... but positive for rate of innovation

** Slide: A new Operating System Model                              :export:

Modern Linux: becoming Microkernel-ish ([[http://www.brendangregg.com/blog/2019-12-02/bpf-a-new-type-of-software.html][from Brendan Gregg]])
[[file:images/bpf-os-model02.jpg]]

** Slide: Adjust mental model of system development                 :export:

As /System Developers/: */Adjust your mental model/*
 - /No need/ to bring everything into *userspace*
 - Can task be solved via /kernel-side/ *inline* processing and manipulation?

Utilize *BPF* /superpowers/
 - Linux Kernel has become a flexible tool at your disposal
 - Run *your own* BPF /kernel-mode application/ inside the kernel

* Slide: BPF components                                              :export:

Closer look at the BPF components:

 - /Bytecode/ - Architecture independent *Instruction Set*
   * /JIT/ to native machine instructions (after loading into kernel)

 - /Runtime environment/ - Linux kernel
   * *Event based* BPF-hooks all over the kernel
   * Per hook limited access to kernel functions via *BPF-helpers*

 - *Sandboxed* by the BPF /Verifier/
   * Limits and verifies memory access and instructions limit

* Slide: BPF /concepts/: context, maps and helpers                   :export:

Each BPF *runtime hook* gets a *pointer to a* /context/ struct
 - BPF bytecode has access to context (read/write limited)
   * Verifier adjusts bytecode when accessing struct members (for safety)

The BPF program itself is stateless
 - BPF /maps/ can be used to *create state*
 - Maps are basically *key = value* containers
 - Maps can hide complex features implemented on Kernel side

*BPF* /helpers/ are used for
 - *Calling Kernel functions*, to obtain info/state from kernel

* Slide: BPF functional areas                                        :export:

BPF has hooks ALL over the kernel
 - More interesting: What *functional areas* are these being used?

What (current) areas are BPF being used within?
 - /Networking/ (ahead as BPF started in networking)
   - Network control and data plane implemented in BPF (TC-BPF/XDP)
   - TCP Congestion Control implemented in BPF
 - /Security/
 - /Observability/ (tracing)

* Slide: /Happy/ 7th /Birthday/ BPF                                  :export:
:PROPERTIES:
:reveal_extra_attr: class="mid-slide"
:END:

Happy birthday BPF!
 - 7 years old (See Alexei's post [[https://lore.kernel.org/all/20210926203409.kn3gzz2eaodflels@ast-mbp.dhcp.thefacebook.com/][Sunday 26 September 2021]])
 - XDP initial commit is approx 5 years + 2 months

Exciting things ahead
 - [[https://ebpf.io/charter/][eBPF Foundation]] (ebpf.io/charter) working towards *standardisation*
 - Microsoft Windows introduce BPF in their kernel

** Slide: Digital age and *out-of-date* documentation               :export:

BPF + LLVM features evolved over time
 - Google search results: /Many/ but *out-dated articles*
 - See *outdated approaches* are used as best-practices */:-(/*

Some */quick advice/* to follow
 - Use /latest/ *LLVM compiler* (and =-target bpf=)
 - Install /latest/ *pahole tool* (used for BTF generation)
 - Get Kernel with /BTF/ (BPF Type Format) support
 - Use *new* /BPF-maps/ definitions (".maps" section) /with BTF/ support


* Slide: Taming /BPF superpowers/ - *not easy*                       :export:
:PROPERTIES:
:reveal_extra_attr: class="mid-slide"
:END:

/BPF superpowers/ - *not easy to use* - */sorry/*
 - Gain kernel level building block, that can be safely updated runtime
 - Taming and learning-curve is challenging

BPF makes extending Kernel /easier/ *than Kernel modules*
 - *Don't confuse this with "easy to use"*

** Slide: BPF development is hard                                   :export:

Know this: *BPF development is hard*
 - *Mental model* mind-shift: Coding "/kernel-mode applications/"
 - Requires understanding internal kernel functions
 - Available BPF /features/ depend on LLVM *compiler versions*
 - Developers will experience: /Verfier/ */rejecting/* programs
 - Coding in Restricted C and passing *verifier is frustrating*
   - Corner-cases due to LLVM can be the issue
 - Troubleshooting event based BPF-prog running kernel side is challenging

** Slide: BPF user experience - could be better                     :export:

BPF is /great/ revolutionary *technology*!
 - */BUT/* /end-user/ deployment *experience* can be *rough*

Recommend watching recent LPC 2021 talk by CloudFlare
 - Talk: [[https://linuxplumbersconf.org/event/11/contributions/933/][BPF user experience rough edges]]
 - Covers 9 common pitfalls (with sad pandas)

** Slide: BPF communities                                           :export:

Remember to *reach out to* /BPF communities/ when stuck

 - BPF Kernel developers: mailto:bpf@vger.kernel.org
 - Slack channel: https://ebpf.io/slack
 - LLVM compiler questions: mailto:iovisor-dev@lists.iovisor.org

/XDP/ communities
 - XDP-newbies: mailto:xdp-newbies@vger.kernel.org
 - GitHub project: https://github.com/xdp-project
 - IRC on [[https://www.oftc.net/][oftc.net]] channel /#xdp/

** Slide: BPF example code                                          :export:

*Best documentation* is BPF /example code/

Under /XDP-project/: [[https://github.com/xdp-project/bpf-examples][github.com/xdp-project/]]
 - [[https://github.com/xdp-project/bpf-examples][bpf-examples]] - Practical BPF examples and build environment
 - [[https://github.com/xdp-project/xdp-tutorial][xdp-tutorial]] - Tutorial with assignments (*/Warning/*: uses old BPF-maps)
 - [[https://github.com/xdp-project/xdp-tools][xdp-tools]] - Tools (xdpdump) + libxdp for /multiple XDP-progs/ on interface
 - [[https://github.com/xdp-project/xdp-cpumap-tc][xdp-cpumap-tc]] - Show XDP + TC-BPF solving Qdisc lock scaling


* Slide: BPF networking                                              :export:
:PROPERTIES:
:reveal_extra_attr: class="mid-slide"
:END:

Focus on BPF for networking

 - /XDP/ (eXpress Data Path) is *our focus*
 - /TC-BPF/ hooks are *equally important* for practical use-cases
 - BPF hooks for cgroups can also be useful for containers

* Slide: What is XDP?                                                :export:

XDP (eXpress Data Path) is a Linux *in-kernel* fast-path
 - /New programmable layer in-front/ of traditional network stack
   - Read, modify, drop, redirect or pass
   - For L2-L3 use-cases: seeing /x10 performance/ improvements!
 - *Avoiding* /memory allocations/
   - No SKB allocations and no-init (SKB zeroes 4 cache-lines per pkt)
 - Adaptive *bulk* processing of frames
 - Very /early access/ to frame (in driver code *after DMA sync*)
 - Ability to */skip/ (large parts) of kernel /code/*
   - Evolve XDP via /BPF-helpers/

** Slide: XDP architecture                                          :export:
#+ATTR_HTML: :class img-no-border
[[file:images/xdp_architecture.png]]

* Slide: Why was an eXpress Data Path (XDP) needed?                  :export:

Linux /networking stack/ assumes layers *L4-L7* are needed for every packet
 - Root-cause of slowdown: (relative) high initial RX cost per packet

Needed to stay relevant as NIC speeds increase (time between packet small)
 - New faster and earlier networking layer was needed to keep up.

/XDP operate/ at layers *L2-L3*
 - *L4* /load-balancer/ possible when *no IP-fragmentation* occurs

@@html:<small>@@

If you forgot OSI model:
 - L2=Ethernet
 - L3=IPv4/IPv6
 - L4=TCP/UDP
 - L7=Applications

@@html:</small>@@

* Slide: XDP pain points /resolved/                                  :export:
:PROPERTIES:
:reveal_extra_attr: class="mid-slide"
:END:

[[https://github.com/xdp-project/xdp-project/blob/master/conference/LinuxPlumbers2019/xdp-distro-view.org][Followup]] to Linux Plumber 2019: [[https://www.linuxplumbersconf.org/event/4/contributions/460/][XDP the distro view]]
 - Some of the *pain points* have been /resolved/

** Slide: Multiple XDP programs on a single interface               :export:

@@html:<small>@@
[[https://github.com/xdp-project/xdp-project/blob/master/conference/LinuxPlumbers2019/xdp-distro-view.org][Followup]] to Linux Plumber 2019: [[https://www.linuxplumbersconf.org/event/4/contributions/460/][XDP the distro view]]
@@html:</small>@@

The library [[https://github.com/xdp-project/xdp-tools/blob/master/lib/libxdp/][libxdp]] (available via [[https://github.com/xdp-project/xdp-tools][xdp-tools]])
 - Have option of loading *multiple XDP programs* on a /single interface/
 - See [[https://github.com/xdp-project/xdp-tools/blob/master/lib/libxdp/README.org#the-dispatcher-program][dispatcher]] API (=xdp_multiprog__*=) in README
 - Depend on kernel feature =freplace= (read as: function replace)

** Slide: XDP "tcpdump" packet capture                              :export:

Tool 'tcpdump' does *not see all packets* anymore.
  - E.g XDP_DROP and XDP_REDIRECT etc.

New tool '[[https://github.com/xdp-project/xdp-tools/tree/master/xdp-dump][xdpdump]]' (available via [[https://github.com/xdp-project/xdp-tools][xdp-tools]])
 - Debug XDP programs already loaded on an interface
 - Packets can be *dumped/inspected*:
   - /Before/ on *entry* to XDP program
   - /After/ at *exit* from an XDP program
     - Furthermore: at *exit* the XDP /action/ is also /captured/
     - /Can inspect XDP_DROP packets!/
 - Use Kernel features =fentry= + =fexit=
   - Also works with multi-prog dispatcher API


* Slide: XDP future development                                      :export:

XDP /multi-buff/
 - Allowing larger MTUs, Jumbo-frames and GRO/GSO compatibility

XDP-/hints/
 - Extracting NIC hardware hints (from RX-descriptor)
 - Traditional hints: RX-hash, RX-checksum, VLAN, RX-timestamp

Drivers /without/ *SKB* knowledge
 - based only on =xdp_frame=
 - Depend on both XDP-hints + XDP multi-buff

* Slide: End: /Questions?/                                           :export:
:PROPERTIES:
:reveal_extra_attr: class="mid-slide"
:END:

Resources:
 - XDP-project - [[https://github.com/xdp-project/][GitHub.com/xdp-project]]
   - Get an easy start with [[https://github.com/xdp-project/bpf-examples][xdp-project/bpf-examples]]

* Emacs end-tricks                                                 :noexport:

This section contains some emacs tricks, that e.g. remove the "Slide:" prefix
in the compiled version.

# Local Variables:
# org-re-reveal-title-slide: "<h1 class=\"title\">%t</h1>
# <h3 class=\"title\">Programmable Runtime Extending Linux Kernel for Packet Processing</h3>
# <h2 class=\"author\">Jesper Dangaard Brouer<br/>Senior Principal Kernel Engineer</h2>
# <h3>Tech Summit, Fastly</br>October 2021</h3>"
# org-export-filter-headline-functions: ((lambda (contents backend info) (replace-regexp-in-string "Slide: " "" contents)))
# End:
