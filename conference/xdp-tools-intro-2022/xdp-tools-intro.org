# -*- fill-column: 79; -*-
#+TITLE: Introduction to xdp-tools
#+AUTHOR: Toke Høiland-Jørgensen <toke@redhat.com>
#+EMAIL: toke@redhat.com
#+REVEAL_THEME: redhat
#+REVEAL_TRANS: linear
#+REVEAL_MARGIN: 0
#+REVEAL_EXTRA_JS: { src: '../reveal.js/js/redhat.js'}
#+REVEAL_ROOT: ../reveal.js
#+OPTIONS: reveal_center:nil reveal_control:t reveal_history:nil
#+OPTIONS: reveal_width:1600 reveal_height:900
#+OPTIONS: ^:nil tags:nil toc:nil num:nil ':t

* For conference: Internal NS team tech talk

This presentation is for an internal tech talk at Red Hat

* Slides below                                                     :noexport:

Only sections with tag ":export:" will end-up in the presentation.

Colors are choosen via org-mode italic/bold high-lighting:
 - /italic/ = /green/
 - *bold*   = *yellow*
 - */italic-bold/* = red

* Slide: */Reminder/*: What is XDP?                                  :export:

XDP (eXpress Data Path) is a Linux *in-kernel* fast-path
 - /Programmable layer in-front/ of traditional network stack
   - Read, modify, drop, redirect or pass
   - For L2-L3 use-cases: seeing /x10 performance/ improvements!
 - *Avoiding* /memory allocations/
   - No SKB allocations and no-init (SKB zeroes 4 cache-lines per pkt)
 - Adaptive *bulk* processing of frames
 - Very /early access/ to frame (in driver code *after DMA sync*)
 - Ability to */skip/ (large parts) of kernel /code/*
   - Evolve XDP via /BPF-helpers/

** Slide: XDP architecture                                        :noexport:
#+ATTR_HTML: :class img-no-border
[[file:../TechSummit-2021/images/xdp_architecture.png]]

* Slide: What is xdp-tools?                                          :export:

Upstream repo: https://github.com/xdp-project/xdp-tools

Contains:
- libxdp

- xdp-loader
- xdp-filter
- xdpdump
- xdp-traffigen (WiP)

Packaged in RHEL 8 & 9

* Slide: libxdp and the multi-prog dispatcher                        :export:
:PROPERTIES:
:reveal_extra_attr: class="mid-slide"
:END:

** Slide: libxdp                                                    :export:

libxdp is a *small library* built on top of libbpf; it provides:

- /User space support/ code for using =AF_XDP= (moved from libbpf)
- /*Multi-prog dispatcher*/ for running multiple XDP programs on a single interface


** Slide: The multi-prog dispatcher                                 :export:

The kernel only allows executing a single XDP program per interface!

#+begin_src C
static volatile const struct xdp_dispatcher_config conf = {};
__attribute__ ((noinline)) int prog0(struct xdp_md *ctx) {
        volatile int ret = XDP_DISPATCHER_RETVAL;

        return ret;  /* this function is replaced on load using freplace */
}
SEC("xdp")
int xdp_dispatcher(struct xdp_md *ctx)
{
        __u8 num_progs_enabled = conf.num_progs_enabled;
        int ret;

        if (num_progs_enabled < 1)
                goto out;
        ret = prog0(ctx); /* repeat for up to 10 progs */
        if (!((1U << ret) & conf.chain_call_actions[0]))
                return ret;
out:
        return XDP_PASS;
}
#+end_src

* Slide: The tools in xdp-tools                                      :export:
:PROPERTIES:
:reveal_extra_attr: class="mid-slide"
:END:

** Slide: xdp-loader                                                :export:

General-purpose /program loader/ based on libxdp (multi-prog support).

#+begin_src sh
# xdp-loader load testns xdp_drop.o
# xdp-loader load testns xdp_pass_kern.o
# xdp-loader status
CURRENT XDP PROGRAM STATUS:

Interface        Prio  Program name      Mode     ID   Tag               Chain actions
--------------------------------------------------------------------------------------
lo                     <No XDP program loaded!>
wg0                    <No XDP program loaded!>
redhat0                <No XDP program loaded!>
eth0                   <No XDP program loaded!>
testns                 xdp_dispatcher    native   357  94d5f00c20184d17
 =>              50     xdp_drop                  352  57cd311f2e27366b  XDP_PASS
 =>              50     xdp_prog_simple           364  3b185187f1855c4c  XDP_PASS
#+end_src


** Slide: xdp-filter                                                :export:
Simplistic *packet filter* demo (not a full-fledged firewall!)

#+begin_src sh
# xdp-filter load testns  -f ipv6
# xdp-filter ip fc00:dead:cafe:1::1
# xdp-filter status
CURRENT XDP-FILTER STATUS:

Aggregate per-action statistics:
  XDP_ABORTED                                   0 pkts           0 KiB
  XDP_DROP                                      5 pkts           0 KiB
  XDP_PASS                                      3 pkts           0 KiB

Loaded on interfaces:
                                           Enabled features
xdpfilt_alw_ip
  testns (native mode)                     ipv6,ipv4,allow

Filtered IP addresses:
                                           Mode             Hit counter
  fc00:dead:cafe:1::1                      dst              5
#+end_src

** Slide: xdpdump                                                   :export:

tcpdump-like utility, but *attaches to existing XDP programs*:

#+begin_src sh
# xdpdump -i testns --rx-capture entry,exit
listening on testns, ingress XDP program ID 400 func xdpfilt_alw_ip, capture mode entry/exit, capture size 262144 bytes
1654692789.575086848: xdpfilt_alw_ip()@entry: packet size 118 bytes on if_index 19, rx queue 0, id 1
1654692789.575092034: xdpfilt_alw_ip()@exit[DROP]: packet size 118 bytes on if_index 19, rx queue 0, id 1
1654692790.590477081: xdpfilt_alw_ip()@entry: packet size 118 bytes on if_index 19, rx queue 0, id 2
1654692790.590493371: xdpfilt_alw_ip()@exit[DROP]: packet size 118 bytes on if_index 19, rx queue 0, id 2

# xdpdump -i testns  -w - | tcpdump -nr -
listening on testns, ingress XDP program ID 400 func xdpfilt_alw_ip, capture mode entry, capture size 262144 bytes
reading from file -, link-type EN10MB (Ethernet), snapshot length 262144
14:54:06.190611 IP6 fc00:dead:cafe:1::2 > fc00:dead:cafe:1::1: ICMP6, echo request, id 59320, seq 1, length 64
14:54:07.216884 IP6 fc00:dead:cafe:1::2 > fc00:dead:cafe:1::1: ICMP6, echo request, id 59320, seq 2, length 64
#+end_src

These packets /*were filtered*/, but we can /still see them/!

** Slide: xdp-trafficgen                                            :export:
XDP-based *programmable traffic generator* (not in RHEL yet):

#+begin_src
# xdp-trafficgen udp ens3f1 # single core
[..]
XDP_REDIRECT    11150720 pkts (   8919659 pps)      696920 KiB (  4567 Mbits/s)

# xdp-trafficgen udp ens3f1 -t 6 # 6 cores
[..]
XDP_REDIRECT    65123603 pkts (  52095122 pps)     4070225 KiB ( 26673 Mbits/s)

# xdp-trafficgen udp ens3f1 -t 6 -d 100 # spraying over 100 dst-ports
[..]
XDP_REDIRECT     8226576 pkts (  32896120 pps)      514161 KiB ( 16843 Mbits/s)

# xdp-trafficgen tcp -i ens3f1 fe80::ee0d:9aff:fedb:11cd -p 1234
Connected to fe80::ee0d:9aff:fedb:11cd port 1234 from fe80::ee0d:9aff:fed8:f5d3 port 39500
[...]
XDP_DROP         3249504 pkts (     23878 pps)     4760015 KiB (   287 Mbits/s)
XDP_PASS               0 pkts (         0 pps)           0 KiB (     0 Mbits/s)
XDP_TX         516392331 pkts (   6217106 pps)   756434078 KiB ( 74605 Mbits/s) <--- retransmissions!
XDP_REDIRECT   545096864 pkts (   6534151 pps)   798481734 KiB ( 78410 Mbits/s)
#+end_src

** Slide: Kernel samples tools                                      :export:

WiP: /moving/ the tools from kernel =samples/bpf= into xdp-tools:

https://github.com/xdp-project/xdp-tools/pull/158

* Slide: End: /Questions?/                                         :export:
:PROPERTIES:
:reveal_extra_attr: class="mid-slide"
:END:

* Emacs end-tricks                                                 :noexport:

This section contains some emacs tricks, that e.g. remove the "Slide:" prefix
in the compiled version.

# Local Variables:
# org-re-reveal-title-slide: "<h1 class=\"title\">%t</h1>
# <h2 class=\"author\">Toke Høiland-Jørgensen<br/><span style=\"font-size: 75%%\">Principal Kernel Engineer,
# Red Hat</span></h2>
# <h3>NS team tech talk</br>June 8th, 2022</h3>"
# org-export-filter-headline-functions: ((lambda (contents backend info) (replace-regexp-in-string "Slide: " "" contents)))
# End:
