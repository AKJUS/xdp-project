# -*- fill-column: 79; -*-
#+TITLE: XDP hints via BPF Type Format (BTF) system
#+AUTHOR: Jesper Dangaard Brouer <hawk@kernel.org>
#+EMAIL: brouer@redhat.com
#+REVEAL_THEME: redhat
#+REVEAL_TRANS: linear
#+REVEAL_MARGIN: 0
#+REVEAL_EXTRA_JS: { src: '../reveal.js/js/redhat.js'}
#+REVEAL_ROOT: ../reveal.js
#+OPTIONS: reveal_center:nil reveal_control:t reveal_history:nil
#+OPTIONS: reveal_width:1600 reveal_height:900
#+OPTIONS: ^:nil tags:nil toc:nil num:nil ':t

* For conference: Lund Linux Con (LLC) 2022

This presentation will be given at [[https://lundlinuxcon.org/][LLC 2022] the
Lund Linux Con.

* Slides below                                                     :noexport:

Only sections with tag ":export:" will end-up in the presentation.

Colors are choosen via org-mode italic/bold high-lighting:
 - /italic/ = /green/
 - *bold*   = *yellow*
 - */italic-bold/* = red

* Brainstorm

XDP-hints dates back to NetDevConf [[https://www.youtube.com/watch?v=uD1_oAHpUmU][Nov 2017]] (by [[https://legacy.netdevconf.info/2.2/papers/waskiewicz-xdpacceleration-talk.pdf][PJ Waskiewicz]])

Basic idea:
 - Provide (or extract) NIC hardware offload hints
 - Store info in XDP metadata (located before pkt header)

XDP metadata area avail since [[https://www.spinics.net/lists/netdev/msg456525.html][Sep 2017]] (by Daniel Borkmann)
 - Space is limited (currently 32 bytes)

Main reason XDP-hints work stalled
 - No consensus on layout of XDP metadata
 - BTF was not ready at that time

Introduce BTF
 - Why we believe BTF can resolve layout problem


Define/introduce problem space
 - XDP currently don't have access to hardware offload "hints"
 - Traditional hints: RX-hash, RX-checksum, VLAN, RX-timestamp

XDP-/hints/
 - Extracting NIC hardware hints (from RX-descriptor)
 - Traditional hints: RX-hash, RX-checksum, VLAN, RX-timestamp

Explaining tech quirks for XDP metadata
 - Grows "backwards" from where packets starts
 - Must be 4 byte aligned
 - Limited size (currently) 32 bytes


BTF from kernel modules

Challenges with BTF from kernel modules
 - BTF IDs are no-longer unique, but per module

Three types of BTF IDs
 - Kernel BTF IDs (unique for running kernel)
 - Kernel module BTF IDs (offset start at highest kernel id)
 - BPF-prog "local" BTF IDs


Users/consumers of BTF layout
 - BPF-progs (either XDP or TC hooks)
 - XDP to SKB steps (in veth and cpumap) for traditional HW offloads
   - e.g. RX-hash, RX-checksum, VLAN, RX-timestamp
 - Chained BPF-progs can update/communicate state via metadata
 - AF_XDP can consume BTF info in userspace to decode metadata area

Works today:
 - Let XDP BPF-prog determine BTF-layout as local-BPF
   - e.g. produce software RX-timestamp at XDP layer
 - Have AF_XDP program lookup BTF-layout in BPF-object file (setup time)
   - Runtime use matching on local BTF-ID and decode information

Point out code that runtime fill BTF-ID
 - How can BPF-prog assign own static runtime created BTF-ID?
   - libbpf hides resolving these IDs at BPF-load time

#+begin_src C
__u32 btf_id = bpf_core_type_id_local(struct xdp_hints_rx_time);
#+end_src


Inspirational: BTF based XDP-hints
 - Bringing the flexibility of BPF
   to NIC hardware offload

 - Unlocking hardware vendors ability to innovate
   - End-users can consume new HW capabilities
     without having to extend the kernel SKB data-structure

* Slide: End: /Questions?/                                           :export:
:PROPERTIES:
:reveal_extra_attr: class="mid-slide"
:END:

Resources:
 - XDP-project - [[https://github.com/xdp-project/][GitHub.com/xdp-project]]
   - Get an easy start with [[https://github.com/xdp-project/bpf-examples][xdp-project/bpf-examples]]
 - XDP-hints mailing list: *xdp-hints* /@/ *xdp-project.net*
   - https://lists.xdp-project.net/

* Emacs end-tricks                                                 :noexport:

This section contains some emacs tricks, that e.g. remove the "Slide:" prefix
in the compiled version.

# Local Variables:
# org-re-reveal-title-slide: "<h1 class=\"title\">%t</h1>
# <h2 class=\"author\">Jesper Dangaard Brouer<br/>Senior Principal Kernel Engineer</h2>
# <h3>Lund Linux Con</br>April 2022</h3>"
# org-export-filter-headline-functions: ((lambda (contents backend info) (replace-regexp-in-string "Slide: " "" contents)))
# End:
