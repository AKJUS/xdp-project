# -*- fill-column: 79; -*-
#+TITLE: XDP hints via BPF Type Format (BTF) system
#+AUTHOR: Jesper Dangaard Brouer <hawk@kernel.org>
#+EMAIL: brouer@redhat.com
#+REVEAL_THEME: redhat
#+REVEAL_TRANS: linear
#+REVEAL_MARGIN: 0
#+REVEAL_EXTRA_JS: { src: '../reveal.js/js/redhat.js'}
#+REVEAL_ROOT: ../reveal.js
#+OPTIONS: reveal_center:nil reveal_control:t reveal_history:nil
#+OPTIONS: reveal_width:1600 reveal_height:900
#+OPTIONS: ^:nil tags:nil toc:nil num:nil ':t

* For conference: Lund Linux Con (LLC) 2022

This presentation will be given at [[https://lundlinuxcon.org/][LLC 2022] the
Lund Linux Con.

* Slides below                                                     :noexport:

Only sections with tag ":export:" will end-up in the presentation.

Colors are choosen via org-mode italic/bold high-lighting:
 - /italic/ = /green/
 - *bold*   = *yellow*
 - */italic-bold/* = red

* Brainstorm

Introduce BTF
 - Why we believe BTF can resolve layout problem

Explaining tech quirks for XDP metadata
 - Grows "backwards" from where packets starts
 - Must be 4 byte aligned
 - Limited size (currently) 32 bytes

BTF from kernel modules

Challenges with BTF from kernel modules
 - BTF IDs are no-longer unique, but per module

Three types of BTF IDs
 - Kernel BTF IDs (unique for running kernel)
 - Kernel module BTF IDs (offset start at highest kernel id)
 - BPF-prog "local" BTF IDs

Users/consumers of BTF layout
 - BPF-progs (either XDP or TC hooks)
 - XDP to SKB steps (in veth and cpumap) for traditional HW offloads
   - e.g. RX-hash, RX-checksum, VLAN, RX-timestamp
 - Chained BPF-progs can update/communicate state via metadata
 - AF_XDP can consume BTF info in userspace to decode metadata area

Works today:
 - Let XDP BPF-prog determine BTF-layout as local-BPF
   - e.g. produce software RX-timestamp at XDP layer
 - Have AF_XDP program lookup BTF-layout in BPF-object file (setup time)
   - Runtime use matching on local BTF-ID and decode information

Point out code that runtime fill BTF-ID
 - How can BPF-prog assign own static runtime created BTF-ID?
   - libbpf hides resolving these IDs at BPF-load time

#+begin_src C
__u32 btf_id = bpf_core_type_id_local(struct xdp_hints_rx_time);
#+end_src


Inspirational: BTF based XDP-hints
 - Bringing the flexibility of BPF
   to NIC hardware offload

 - Unlocking hardware vendors ability to innovate
   - End-users can consume new HW capabilities
     without having to extend the kernel SKB data-structure

* Slide: */Reminder/*: What is BPF ?                                 :export:

From: https://ebpf.io/what-is-ebpf
#+begin_quote
BPF is a revolutionary technology that can run sandboxed programs in the Linux
kernel without changing kernel source code or loading a kernel module
#+end_quote

/BPF/ is a *technology name*: */no longer an acronym/*

*Rate of innovation* at the operating system level: */Traditionally slow/*
 - BPF enables things at OS-level that were not possible before
 - BPF will /radically increase/ rate of innovation

** Slide: *Traditional* Kernel development process                  :export:

[[file:../TechSummit-2021/images/bpf_comic01_scale.png]]

** Slide: *BPF* development process                                 :export:

[[file:../TechSummit-2021/images/bpf_comic02_scale.png]]


* Slide: */Reminder/* What is XDP?                                   :export:

XDP (eXpress Data Path) is a Linux *in-kernel* fast-path
 - /Programmable layer in-front/ of traditional network stack
   - Read, modify, drop, redirect or pass
   - For L2-L3 use-cases: seeing /x10 performance/ improvements!
 - *Avoiding* /memory allocations/
   - No SKB allocations and no-init (SKB zeroes 4 cache-lines per pkt)
 - Adaptive *bulk* processing of frames
 - Very /early access/ to frame (in driver code *after DMA sync*)
 - Ability to */skip/ (large parts) of kernel /code/*
   - Evolve XDP via /BPF-helpers/
 - */Pitfall/*: Lost traditional HW offloads (e.g. RX-hash, checksum etc.)

** Slide: XDP architecture                                        :noexport:
#+ATTR_HTML: :class img-no-border
[[file:../TechSummit-2021/images/xdp_architecture.png]]

* Slide: What are *traditional* hardware offload hints?              :export:

NIC *hardware* provide offload hints in (RX or TX) *descriptor*
 - */Netstack extended SKB/* packet data-struct to store+use these

*RX descriptors* can e.g. provide:
 - RX-/checksum/ validation, RX-/hash/ value, RX-/timestamp/
 - RX-/VLAN/ provides VLAN ID/tag non-inline

*TX descriptors* can e.g. ask hardware to perform actions:
 - *TX*-/checksum/: Ask hardware to compute checksums on transmission
 - TX-/VLAN/: Ask hardware in insert VLAN id
 - Advanced: /TX-timestamp/ HW store TX-time and on completion read-back
 - Advanced: /TX-LaunchTime/ ask HW to send packet at specific time in future

* Slide: What are XDP-hints                                          :export:

/XDP-hints/ dates back to NetDevConf [[https://www.youtube.com/watch?v=uD1_oAHpUmU][Nov 2017]] (by [[https://legacy.netdevconf.info/2.2/papers/waskiewicz-xdpacceleration-talk.pdf][PJ Waskiewicz]])
 - Purpose: /Let XDP access HW offload hints/

Basic idea:
 - Provide or extract (from descriptor) NIC hardware offload hints
 - *Store info in XDP metadata area* (located before pkt header)

XDP /metadata area/ avail since [[https://www.spinics.net/lists/netdev/msg456525.html][Sep 2017]] (by Daniel Borkmann)
 - *Space is limited* (currently 32 bytes)

Main reason XDP-hints work *stalled*
 - */No consensus/* on *layout* of XDP metadata
 - /BTF/ was *not ready* at that time

* Slide: Introducing BTF - BPF Type Format                           :export:

[[https://www.kernel.org/doc/html/latest/bpf/btf.html][BTF]] compact Type Format (based on compilers DWARF debug type info)
 - Great [[https://facebookmicrosites.github.io/bpf/blog/2018/11/14/btf-enhancement.html][blogpost]] by Andrii Nakryiko
   - 124MB of DWARF data compressed to 1.5MB compact BTF type data
 - Suitable to be /included in Linux kernel image/ by default
   - See file =/sys/kernel/btf/vmlinux= avail in most distro kernels
 - Kernel's runtime data structures have become *self-describing via BTF*

#+begin_src sh
 # bpftool btf dump file /sys/kernel/btf/vmlinux format c
#+end_src

* Slide: More components: CO-RE + BTF + libbpf                       :export:

[[https://nakryiko.com/posts/bpf-portability-and-co-re/#compiler-support][Blogpost]] on BPF *CO-RE* (/Compile Once â€“ Run Everywhere/) (Andrii Nakryiko)
 - Explains how BTF is one piece of the puzzle
 - BPF ELF object files are made /portable across kernel versions via CO-RE/
 - LLVM *compiler emit BTF relocations* (for BPF code accessing struct fields)

BPF-prog (binary ELF object) /loader/ *libbpf* /combines pieces/
 - Tailor BPF-prog code to a particular running kernel
 - Looks at *BPF-prog recorded BTF* type and relocation information
   - /matches/ them to BTF information provided by *running kernel*
   - /updates necessary offsets/ and other relocatable data
 - Kernel struct can change layout, iff member name+size stays same


* Slide: End: /Questions?/                                         :noexport:
:PROPERTIES:
:reveal_extra_attr: class="mid-slide"
:END:

Resources:
 - XDP-project - [[https://github.com/xdp-project/][GitHub.com/xdp-project]]
   - Get an easy start with [[https://github.com/xdp-project/bpf-examples][xdp-project/bpf-examples]]
 - XDP-hints mailing list: *xdp-hints* /@/ *xdp-project.net*
   - https://lists.xdp-project.net/

* Emacs end-tricks                                                 :noexport:

This section contains some emacs tricks, that e.g. remove the "Slide:" prefix
in the compiled version.

# Local Variables:
# org-re-reveal-title-slide: "<h1 class=\"title\">%t</h1>
# <h2 class=\"author\">Jesper Dangaard Brouer<br/>Senior Principal Kernel Engineer</h2>
# <h3>Lund Linux Con</br>April 2022</h3>"
# org-export-filter-headline-functions: ((lambda (contents backend info) (replace-regexp-in-string "Slide: " "" contents)))
# End:
